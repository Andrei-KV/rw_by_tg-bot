import json
import sys
import threading
import time
import webbrowser
from datetime import datetime
from urllib.parse import quote

import requests
import telebot
from bs4 import BeautifulSoup, SoupStrainer
from telebot import types
from token_info import bot_name, token

from all_stations_list import all_station_list

# =============================================
# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä -> –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
# =============================================
seats_type_dict = {
    '0': '–ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—Ç',
    '1': '–û–±—â–∏–π',
    '2': '–°–∏–¥—è—á–∏–π',
    '3': '–ü–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã–π',
    '4': '–ö—É–ø–µ–π–Ω—ã–π',
    '5': '–ú—è–≥–∫–∏–π',
    '6': '–°–í',
}

# =============================================
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
# =============================================
user_data = {}  # –ö–ª—é—á ‚Äî chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

# =============================================
# –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞
# =============================================
bot = telebot.TeleBot(token)


# ========================
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—Ç–∞
# ========================
def ensure_start(func):
    def wrapper(message):
        try:
            chat_id = message.chat.id
        except AttributeError:
            chat_id = message.message.chat.id  # –ø—Ä–∏ callback
        if chat_id not in user_data:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
            return
        return func(message)
    return wrapper


# ========================
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
# ========================
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ')
    bot.register_next_step_handler(message, get_city_from)
    user_data[message.chat.id] = {'step': 'start'}


# ============================================
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# ============================================
def get_city_from(message):
    city_from = normalize_city_name(message.text)
    if city_from not in all_station_list:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
        bot.register_next_step_handler(message, get_city_from)
        return
    user_data[message.chat.id].update({'city_from': city_from})
    bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ')
    bot.register_next_step_handler(message, get_city_to)


# ============================================
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
# ============================================
def get_city_to(message):
    city_to = normalize_city_name(message.text)
    if city_to not in all_station_list:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
        bot.register_next_step_handler(message, get_city_to)
        return
    user_data[message.chat.id].update({'city_to': city_to})
    bot.send_message(message.chat.id, '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥: ')
    bot.register_next_step_handler(message, get_date)


# ============================================
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã
# ============================================
def get_date(message):
    try:
        date = normalize_date(message.text)
        user_data[message.chat.id].update({'date': date})
        get_trains_list(message)
    except ValueError as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã:")
        bot.register_next_step_handler(message, get_date)
        return


# ========================================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤ —Å —Å–∞–π—Ç–∞
# ========================================================
def get_trains_list(message):
    encoded_from = quote(user_data[message.chat.id]['city_from'])
    encoded_to = quote(user_data[message.chat.id]['city_to'])
    date = user_data[message.chat.id]['date']

    url = f'https://pass.rw.by/ru/route/?from={encoded_from}&to={encoded_to}&date={date}'
    user_data[message.chat.id]['url'] = url

    try:
        r = requests.get(url)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        start(message)
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    only_span_div_tag = SoupStrainer(['span', 'div'])
    soup = BeautifulSoup(r.text, 'lxml', parse_only=only_span_div_tag)
    user_data[message.chat.id]['soup'] = soup

    train_id_list = [i.text for i in soup.find_all('span', class_="train-number")]
    trains_list = []

    # –°–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–µ–∑–¥–∞
    for train in train_id_list:
        try:
            time_depart = soup.select(f'[data-train-number^="{train}"] [data-sort="departure"]')[0].text.strip()
            time_arriv = soup.select(f'[data-train-number^="{train}"] [data-sort="arrival"]')[0].text.strip()
        except Exception:
            time_depart, time_arriv = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        trains_list.append([train, time_depart, time_arriv])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    for train in trains_list:
        markup.row(types.InlineKeyboardButton(
            f'–ü–æ–µ–∑–¥: {train[0]} –û—Ç–ø—Ä: {train[1]} –ü—Ä–∏–±: {train[2]}',
            callback_data=f'{train[0]}_selected')
        )
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤: ", reply_markup=markup)


# ========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞
# ========================
@bot.callback_query_handler(func=lambda callback: callback.data.endswith('_selected'))
@ensure_start
def select_train(callback):
    train_selected = callback.data.split('_')[0]
    chat_id = callback.message.chat.id
    soup = user_data[chat_id]['soup']

    ticket_dict = check_tickets_by_class(train_selected, soup, chat_id)

    if 'tracking_active' not in user_data[chat_id]:
        user_data[chat_id]['tracking_active'] = {}

    user_data[chat_id]['tracking_active'][train_selected] = {
        'status': False,
        'ticket_dict': ticket_dict,
    }

    bot.answer_callback_query(callback.id)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    if seats_type_dict['0'] in ticket_dict:
        btn_track = types.InlineKeyboardButton(
            '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–≤',
            callback_data='re_get_trains_list'
        )
    else:
        btn_track = types.InlineKeyboardButton(
            '–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ',
            callback_data=f'{train_selected}_start_tracking'
        )
    markup.add(btn_track)

    bot.send_message(
        chat_id=callback.message.chat.id,
        text=f'–ü–æ–µ–∑–¥ ‚Ññ{train_selected}\n{ticket_dict}',
        reply_markup=markup
    )


# ================================
# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–≤
# ================================
@bot.callback_query_handler(func=lambda callback: callback.data == 're_get_trains_list')
@ensure_start
def re_get_trains_list(callback):
    get_trains_list(callback.message)


# ================================
# –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
# ================================
@bot.callback_query_handler(func=lambda callback: callback.data.endswith('_start_tracking'))
@ensure_start
def start_tracking_train(callback):
    train_tracking = callback.data.split('_')[0]
    chat_id = callback.message.chat.id

    user_data[chat_id]['tracking_active'][train_tracking]['status'] = True

    def tracking_loop(chat_id, train_tracking):
        try:
            while True:
                tracking_data = user_data.get(chat_id, {}).get('tracking_active', {}).get(train_tracking)
                if not tracking_data or not tracking_data.get('status'):
                    print(f"[thread exit] –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω: {train_tracking} –¥–ª—è {chat_id}")
                    return

                r = requests.get(user_data[chat_id]['url'])
                soup = BeautifulSoup(r.text, 'lxml', parse_only=SoupStrainer(['span', 'div']))
                user_data[chat_id]['soup'] = soup

                ticket_dict = check_tickets_by_class(train_tracking, soup, chat_id)
                if ticket_dict != tracking_data.get('ticket_dict'):
                    bot.send_message(chat_id, f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ {train_tracking}: {ticket_dict}')
                    tracking_data['ticket_dict'] = ticket_dict

                print("‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏:")
                for thread in threading.enumerate():
                    print(f"  üî∏ {thread.name} (ID: {thread.ident})")

                time.sleep(15)

        except Exception as e:
            print(f"[thread error] {chat_id}, {train_tracking}: {str(e)}")

    thread = threading.Thread(
        target=tracking_loop,
        args=(chat_id, train_tracking),
        name=f"tracking_{train_tracking}_{chat_id}"
    )
    thread.start()
    bot.send_message(chat_id, f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_tracking} –∑–∞–ø—É—â–µ–Ω–æ.')


# ========================
# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–∏–Ω–≥–∞
# ========================
@bot.message_handler(commands=['show_track_list'])
@ensure_start
def show_track_list(message):
    track_list = get_track_list(message)
    reply = '\n'.join(track_list) if track_list else '–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç'
    bot.reply_to(message, reply)


def get_track_list(message):
    track_list = []
    if user_data[message.chat.id].get('tracking_active'):
        for train, info in user_data[message.chat.id]['tracking_active'].items():
            if info['status']:
                track_list.append(train)
    return track_list


# ========================
# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
# ========================
@bot.message_handler(commands=['stop_track_train'])
@ensure_start
def stop_track_train(message):
    track_list = get_track_list(message)
    if track_list:
        markup = types.InlineKeyboardMarkup()
        for train in track_list:
            markup.row(types.InlineKeyboardButton(
                f'–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞: {train}',
                callback_data=f'{train}_stop_tracking')
            )
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ", reply_markup=markup)
    else:
        bot.reply_to(message, '–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç')


@bot.callback_query_handler(func=lambda callback: callback.data.endswith('_stop_tracking'))
@ensure_start
def stop_tracking_train_by_number(callback):
    train = callback.data.split('_')[0]
    chat_id = callback.message.chat.id
    user_data[chat_id]['tracking_active'][train]['status'] = False
    bot.send_message(chat_id, f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')


# ========================
# –°—Ç–æ–ø –≤—Å–µ–π —Å–µ—Å—Å–∏–∏
# ========================
@bot.message_handler(commands=['stop'])
@ensure_start
def stop(message):
    chat_id = message.chat.id
    if chat_id in user_data and 'tracking_active' in user_data[chat_id]:
        for train in user_data[chat_id]['tracking_active']:
            user_data[chat_id]['tracking_active'][train]['status'] = False
    user_data.pop(chat_id, None)
    bot.send_message(chat_id, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω')


# ========================
# –í—ã—Ö–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
# ========================
@bot.message_handler(commands=['1765362'])
def exit_admin(message):
    del user_data[message.chat.id]
    bot.send_message(message.chat.id, '–í—ã—Ö–æ–¥ –∏–∑ –ü–û')
    bot.stop_polling()
    sys.exit()


# ========================
# –£—Ç–∏–ª–∏—Ç—ã
# ========================
def normalize_city_name(name):
    return name.strip().lower().capitalize()


def normalize_date(date_str):
    formats = ['%d.%m.%Y', '%d/%m/%Y', '%d-%m-%Y', '%Y-%m-%d', '%d %m %Y', '%Y %m %d']
    today = datetime.today().date()
    for fmt in formats:
        try:
            dt = datetime.strptime(date_str.strip(), fmt)
            if dt.date() < today:
                raise ValueError("–í–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞")
            return dt.strftime('%Y-%m-%d')
        except ValueError:
            continue
    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä—ã: {today.strftime('%Y-%m-%d')}, {today.strftime('%d %m %Y')}")


def check_tickets_by_class(train_number, soup, chat_id):
    train_info = soup.select(f'div.sch-table__row[data-train-number^="{train_number}"]')
    selling_allowed = train_info[0]['data-ticket_selling_allowed']
    if selling_allowed == 'true':
        return get_tickets_by_class(train_number, soup)
    elif selling_allowed == 'false':
        return '–ú–µ—Å—Ç –Ω–µ—Ç'
    else:
        return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–µ'


def get_tickets_by_class(train_number, soup):
    train_info = soup.select(f'div.sch-table__row[data-train-number^="{train_number}"]')
    class_names = train_info[0].find_all(class_="sch-table__t-quant js-train-modal dash")
    tickets_by_class = {}
    for class_n in class_names:
        name = seats_type_dict[class_n['data-car-type']]
        try:
            seats_num = int(class_n.select_one('span').text)
        except ValueError:
            tickets_by_class[name] = '\u221e'
            continue
        if name in tickets_by_class:
            tickets_by_class[name] += seats_num
        else:
            tickets_by_class[name] = seats_num
    return tickets_by_class


# ========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ========================
bot.polling(non_stop=True)
