import json
import logging
import os
import sqlite3

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
import threading
import time
from collections import defaultdict
from copy import deepcopy
from datetime import datetime
from logging.handlers import RotatingFileHandler
from random import randint
from urllib.parse import quote

import requests

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –±–æ—Ç–∞
import telebot
from bs4 import BeautifulSoup

# –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
from bs4.filter import SoupStrainer
from telebot import apihelper, types

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π
from all_stations_list import all_station_list
from token_info import stop_code, token


# –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –¥–ª—è "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º"
class PastDateError(ValueError):
    pass


# –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –¥–ª—è "–î–∞—Ç–∞ –≤ –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º"
class FutureDateError(ValueError):
    pass


# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä-–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
seats_type_dict = {
    "0": "–ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ üö∂‚Äç‚ôÇÔ∏è",
    "1": "–û–±—â–∏–π üöÉ",
    "2": "–°–∏–¥—è—á–∏–π üí∫",
    "3": "–ü–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã–π üõèÔ∏è",
    "4": "–ö—É–ø–µ–π–Ω—ã–π üö™üõèÔ∏è",
    "5": "–ú—è–≥–∫–∏–π üõãÔ∏è",
    "6": "–°–í üëë",
}


# –í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = defaultdict(
    lambda: {}
)  # –ö–ª—é—á - chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ë–î –∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ user_data
db_lock = threading.Lock()
user_data_lock = threading.Lock()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        'train_bot.log', maxBytes=10 * 1024 * 1024, backupCount=3  # 10 MB
    )
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)


setup_logging()


def get_user_data(chat_id):
    logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ chat_id: {chat_id}")
    with user_data_lock:
        return deepcopy(user_data.get(chat_id, {}))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏


def update_user_data(chat_id, key, value):
    with user_data_lock:
        if chat_id not in user_data:
            user_data[chat_id] = {}
        user_data[chat_id][key] = value


def set_user_data(chat_id, data_dict):
    with user_data_lock:
        user_data[chat_id] = deepcopy(data_dict)


def del_user_data(chat_id):
    with user_data_lock:
        user_data.pop(chat_id, None)
        logging.debug(f"user_data –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è {chat_id}: {user_data}")


# -----------------------------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
with db_lock:
    conn = sqlite3.connect('tracking_train.sqlite3')

    # –ö—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS users (
        chat_id INTEGER PRIMARY KEY
    )
    """
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS routes (
        route_id INTEGER PRIMARY KEY AUTOINCREMENT,
        city_from TEXT,
        city_to TEXT,
        date TEXT,
        url TEXT UNIQUE
    )
    """
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–µ–∑–¥–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS trains (
        train_id INTEGER PRIMARY KEY AUTOINCREMENT,
        route_id INTEGER NOT NULL,
        train_number TEXT,
        time_depart TEXT,
        time_arriv TEXT,
        FOREIGN KEY (route_id) REFERENCES routes(route_id)
        UNIQUE (route_id, train_number, time_depart, time_arriv)
    )
    """
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ–µ–∑–¥–∞
    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS tracking (
        tracking_id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER NOT NULL,
        train_id INTEGER NOT NULL,
        json_ticket_dict TEXT,
        status INTEGER DEFAULT 0,
        FOREIGN KEY (chat_id) REFERENCES users(chat_id),
        FOREIGN KEY (train_id) REFERENCES trains(train_id)
        UNIQUE (chat_id, train_id)
    )
    """
    )

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–µ–Ω–∏–π
    conn.commit()
    # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π
    cursor.close()
    # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    conn.close()


# ----------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def add_user_db(chat_id):
    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            cursor.execute(
                """
                INSERT OR IGNORE INTO users (chat_id)
                VALUES (?)
            """,
                (chat_id,),
            )
            conn.commit()
            logging.info(f"User {chat_id} added to database")
        except sqlite3.Error as e:
            logging.error(f"Database error in add_user_db: {str(e)}")
            raise
        finally:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")


def add_route_db(city_from, city_to, date, url):
    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            # –ë–ª–∞–≥–æ–¥–∞—Ä—è URL UNIQUE –Ω–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
            cursor.execute(
                """
                INSERT OR IGNORE INTO routes (city_from, city_to, date, url)
                VALUES (?, ?, ? , ?)
            """,
                (city_from, city_to, date, url),
            )
            conn.commit()
            logging.info(
                f"Route {city_from}-{city_to}-{date} added to database"
            )
        except sqlite3.Error as e:
            logging.error(f"Database error in add_route_db: {str(e)}")
            raise
        finally:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")


def add_train_db(train, time_depart, time_arriv, url):
    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            # –í—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            cursor.execute("SELECT route_id FROM routes WHERE url = ?", (url,))
            route_id = cursor.fetchone()[0]
            cursor.execute(
                """
                INSERT OR IGNORE INTO trains
                (route_id, train_number, time_depart, time_arriv)
                VALUES (?, ?, ?, ?)
            """,
                (route_id, train, time_depart, time_arriv),
            )
            conn.commit()
            logging.info(
                f"Train: {train} for route_id: {route_id} added to database"
            )
        except sqlite3.Error as e:
            logging.error(f"Database error in add_train_db: {str(e)}")
            raise
        finally:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")


def add_tracking_db(chat_id, train_selected, ticket_dict, url, status=False):
    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∏—Ç—å route_id –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É URL
            cursor.execute("SELECT route_id FROM routes WHERE url = ?", (url,))
            route_id = cursor.fetchone()[0]

            # –ü–æ–ª—É—á–∏—Ç—å train_id –ø–æ route_id –∏ train_selected
            cursor.execute(
                """
            SELECT train_id FROM trains
            WHERE route_id = ? AND train_number = ?
            """,
                (route_id, train_selected),
            )
            train_id = cursor.fetchone()[0]

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –±–∏–ª–µ—Ç–æ–≤ –≤ JSON
            json_ticket_dict = json.dumps(ticket_dict)

            # –í—Å—Ç–∞–≤–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            cursor.execute(
                """
                INSERT OR IGNORE INTO tracking
                (chat_id, train_id, json_ticket_dict, status)
                VALUES (?, ?, ?, ?)
                """,
                (chat_id, train_id, json_ticket_dict, status),
            )
            conn.commit()
            logging.info(f"Train_id: {train_id} added to db_tracking_list")
        except sqlite3.Error as e:
            logging.error(f"Database error in add_tracking_db: {str(e)}")
            raise
        finally:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")


# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –∏–∑ –ë–î
def get_trains_list_db(url):
    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∏—Ç—å route_id –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É URL
            cursor.execute("SELECT route_id FROM routes WHERE url = ?", (url,))
            route_id = cursor.fetchone()[0]
            # –ü–æ–ª—É—á–∏—Ç—å trains_list –ø–æ route_id
            cursor.execute(
                """
            SELECT train_number, time_depart, time_arriv FROM trains
            WHERE route_id = ?
            ORDER BY time_depart""",
                (route_id,),
            )
            trains_list = cursor.fetchall()

            conn.commit()
        except sqlite3.Error as e:
            logging.error(f"Database error in get_trains_list_db: {str(e)}")
            raise
        finally:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")
    return trains_list


# ----------------------------------------------------------------------------


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ü—Ä–æ–≤–µ—Ä–∫–∞ "start" –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def ensure_start(func):
    def wrapper(message):
        try:
            chat_id = message.chat.id
        except AttributeError:
            chat_id = message.message.chat.id  # –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è callback
        if not get_user_data(chat_id):
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
            return
        return func(message)

    return wrapper


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def with_command_intercept(func):
    def wrapper(message):
        text = message.text or ""
        if text.startswith("/stop"):
            stop(message)
            return
        if text.startswith("/start"):
            start(message)
            return
        if text.startswith(f"/{stop_code}"):
            exit_admin(message)
            return
        # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
        return func(message)

    return wrapper


# =============================================================================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö


# –°–æ–∑–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram.
bot = telebot.TeleBot(token, threaded=True)  # type: ignore


# –ó–∞–ø—É—Å–∫ —á–∞—Ç–∞. –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@bot.message_handler(commands=["start"])
def start(message):
    try:
        chat_id = message.chat.id
        logging.info(f"User {chat_id} started the bot")
        bot.send_message(chat_id, "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ")
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # "–í—ã–∑–≤–∞—Ç—å next_step_handler –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.register_next_step_handler(message, get_city_from)
        set_user_data(chat_id, {"step": "start"})

        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        add_user_db(chat_id)
    except Exception as e:
        logging.error(f"Error in start command: {str(e)}", exc_info=True)
        raise


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–π
@with_command_intercept
def get_city_from(message):
    # if message.text.startswith('/stop'):
    #     # –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞
    #     bot.register_next_step_handler(message, stop)
    #     return
    chat_id = message.chat.id
    city_from = normalize_city_name(message.text)
    if city_from not in all_station_list:
        bot.send_message(
            chat_id,
            """\
                        ‚úèÔ∏è –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\
                        –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥
                         """,
        )
        # –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, get_city_from)
        return
    update_user_data(chat_id, "city_from", city_from)
    bot.send_message(chat_id, "–°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è: ")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è
    bot.register_next_step_handler(message, get_city_to)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–π
@with_command_intercept
def get_city_to(message):
    # if message.text.startswith('/stop'):
    #     # –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞
    #     bot.register_next_step_handler(message, stop)
    #     return
    chat_id = message.chat.id
    city_to = normalize_city_name(message.text)
    if city_to not in all_station_list:
        bot.send_message(
            chat_id,
            """\
                        ‚úèÔ∏è –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n\
                        –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥
                         """,
        )
        # –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, get_city_to)
        return
    update_user_data(chat_id, "city_to", city_to)
    bot.send_message(chat_id, "üìÖ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥: ")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—Ç—ã
    bot.register_next_step_handler(message, get_date)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@with_command_intercept
def get_date(message):
    # if message.text.startswith('/stop'):
    #     # –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞
    #     bot.register_next_step_handler(message, stop)
    #     return
    chat_id = message.chat.id
    try:
        date = normalize_date(message.text)
        update_user_data(chat_id, "date", date)
        get_trains_list(message)
        return
    except (PastDateError, FutureDateError, ValueError) as e:
        bot.send_message(chat_id, f"‚úèÔ∏è {e}.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã")
        # –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, get_date)
        return
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è get_trains_list(): {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\n–ü–æ—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        # –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞
        stop(message)
        return


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
def get_trains_list(message):
    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bot.send_chat_action(message.chat.id, 'typing')  # Show typing indicator
    time.sleep(1)  # Optional delay
    bot.send_message(message.chat.id, "–ò–¥—ë—Ç –ø–æ–∏—Å–∫ üîç")  # Send your custom text
    chat_id = message.chat.id

    user_info = get_user_data(chat_id)
    if not user_info:
        logging.error(f"No user data for chat_id {chat_id}")
        raise ValueError("User data not found")

    try:
        q_from = quote(user_info["city_from"])
        q_to = quote(user_info["city_to"])
        date = user_info["date"]
    except KeyError as e:
        logging.error(f"Missing key in user data: {e}")
        raise ValueError(f"Incomplete user data: missing {e}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã "soup"
    url = f"https://pass.rw.by/ru/route/?from={q_from}&to={q_to}&date={date}"
    update_user_data(chat_id, "url", url)
    try:
        r = requests.get(url)
        response_time = r.elapsed.total_seconds()  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        logging.info(
            f"–ó–∞–ø—Ä–æ—Å \n{user_data[chat_id]}"
            f"–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {response_time:.3f} —Å–µ–∫—É–Ω–¥"
        )

    except Exception as e:
        logging.error(f"Server request error: {e}")
        bot.send_message(
            chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞"
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        start(message)
        return
    # –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç –≤ –ë–î
    add_route_db(
        user_info["city_from"],
        user_info["city_to"],
        date,
        url,
    )

    only_span_div_tag = SoupStrainer(["span", "div"])
    soup = BeautifulSoup(r.text, "lxml", parse_only=only_span_div_tag)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    update_user_data(chat_id, "soup", soup)

    train_id_list = [
        i.text for i in soup.find_all("span", class_="train-number")
    ]

    trains_list = []
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è
    for train in train_id_list:
        try:
            time_depart = soup.select(
                f'[data-train-number^="{train}"] \
                                    [data-sort="departure"]'
            )[0].text.strip()
            time_arriv = soup.select(
                f'[data-train-number^="{train}"] \
                                    [data-sort="arrival"]'
            )[0].text.strip()
        except Exception:
            time_depart, time_arriv = (
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            )
        trains_list.append([train, time_depart, time_arriv])
        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∞ –≤ –ë–î
        add_train_db(train, time_depart, time_arriv, url)
        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤
    show_train_list(message)


def show_train_list(message):
    chat_id = message.chat.id
    url = user_data[chat_id]["url"]
    trains_list = get_trains_list_db(url)
    markup = types.InlineKeyboardMarkup()
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for train in trains_list:
        markup.row(
            types.InlineKeyboardButton(
                f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train[0]} üïí {train[1]} ‚û°Ô∏è {train[2]}",
                callback_data=f"{train[0]}_selected",
            )
        )
    if not trains_list:
        bot.send_message(
            chat_id,
            "‚ùìüöÜ–ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ª–∏–±–æ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\
                \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞",
        )
        start(message)
        return
    bot.send_message(
        chat_id,
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤: ",
        reply_markup=markup,
    )


# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç
@bot.callback_query_handler(
    func=lambda callback: callback.data.endswith("_selected")
)
@ensure_start
def select_train(callback):
    # –ú–Ω–∏–º—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    bot.answer_callback_query(callback.id)

    train_selected = callback.data.split("_")[0]
    chat_id = callback.message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏ –∑–¥–µ—Å—å, —Ç.–∫. –¥–∞–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç message
    soup = user_data[chat_id]["soup"]

    # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ "–ú–µ—Å—Ç –Ω–µ—Ç"
    ticket_dict = check_tickets_by_class(train_selected, soup, chat_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤, –Ω–æ –∑–¥–µ—Å—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞ —á—Ç–æ False
    # –ó–¥–µ—Å—å, —Ç.–∫. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

    url = user_data[chat_id]['url']
    add_tracking_db(chat_id, train_selected, ticket_dict, url, status=False)

    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –ø–æ–µ–∑–¥–æ–º
    markup = types.InlineKeyboardMarkup()

    # –ï—Å–ª–∏ '–ë–µ–∑ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç' –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–µ–∑–¥–∞
    if seats_type_dict["0"] in ticket_dict:
        btn_track = types.InlineKeyboardButton(
            "üîÑ –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∞–º",
            callback_data="re_get_trains_list",
        )
        markup.add(btn_track)

        bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_selected}\nüîï –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ—Ç",
            reply_markup=markup,
        )
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elif check_depart_time(train_selected, soup) < 0:
        btn_track = types.InlineKeyboardButton(
            "üîÑ –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∞–º",
            callback_data="re_get_trains_list",
        )
        markup.add(btn_track)

        bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_selected}\n‚è∞ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è",
            reply_markup=markup,
        )
    else:
        btn_track = types.InlineKeyboardButton(
            "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å",
            callback_data=f"{train_selected}_start_tracking",
        )
        markup.add(btn_track)

        bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_selected}\n{ticket_dict}",
            reply_markup=markup,
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–≤, –µ—Å–ª–∏ –ø–æ–µ–∑–¥ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—Ç
@bot.callback_query_handler(
    func=lambda callback: callback.data == "re_get_trains_list"
)
@ensure_start
def re_get_trains_list(callback):
    bot.answer_callback_query(callback.id)  # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    show_train_list(callback.message)
    pass


# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.message_handler(commands=["add_train_last_route", "add_train_new_route"])
@ensure_start
def add_track_train(message):
    if message.text == "/add_train_new_route":
        start(message)
        pass
    elif message.text == "/add_train_last_route":
        show_train_list(message)
        pass


# –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∞ –≤ –ª–∏—Å—Ç —Å–ª–µ–∂–µ–Ω–∏—è
@bot.callback_query_handler(
    func=lambda callback: callback.data.endswith("_start_tracking")
)
@ensure_start
def start_tracking_train(callback):
    bot.answer_callback_query(callback.id)  # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º

    train_tracking = callback.data.split("_")[0]
    chat_id = callback.message.chat.id
    url = user_data[chat_id]['url']

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∏—Ç—å route_id –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É URL
            cursor.execute("SELECT route_id FROM routes WHERE url = ?", (url,))
            route_id = cursor.fetchone()[0]

            # –ü–æ–ª—É—á–∏—Ç—å train_id –ø–æ route_id –∏ train_tracking
            cursor.execute(
                """
            SELECT train_id FROM trains
            WHERE route_id = ? AND train_number = ?
            """,
                (route_id, train_tracking),
            )
            train_id = cursor.fetchone()[0]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑–ª–∏—à–Ω–∏–π –ø–æ—Ç–æ–∫
            cursor.execute(
                """SELECT status FROM tracking
            WHERE chat_id = ? AND train_id = ?
                """,
                (
                    chat_id,
                    train_id,
                ),
            )
            status = cursor.fetchone()[0]

            if status == '1':
                bot.send_message(
                    chat_id,
                    f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_tracking} —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.",
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 5 –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
            cursor.execute(
                """
                SELECT COUNT(*) FROM tracking
                WHERE chat_id = ? AND status = 1
                """,
                (chat_id,),
            )
            count = cursor.fetchone()[0]

            if count >= 5:
                bot.send_message(
                    chat_id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π\n(max 5)"
                )
                return

            # –í—Å—Ç–∞–≤–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            cursor.execute(
                """
                UPDATE tracking SET status = ?
                WHERE chat_id = ? AND train_id = ?
                """,
                (
                    True,
                    chat_id,
                    train_id,
                ),
            )

            conn.commit()
            logging.info(
                f"Train_id: {train_id} start tracking for chat_id: {chat_id}"
            )
        except sqlite3.Error as e:
            logging.error(f"Database error in start_tracking_train: {str(e)}")
            raise
        finally:
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

    # –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # –õ—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ
    def tracking_loop(chat_id, train_tracking, train_id, route_id, url):
        logging.debug(f"Tracking train {train_tracking} for user {chat_id}")
        try:
            while True:
                with db_lock:
                    try:
                        conn = sqlite3.connect('tracking_train.sqlite3')
                        cursor = conn.cursor()
                        cursor.execute(
                            """SELECT json_ticket_dict, status FROM tracking
                            WHERE chat_id = ? AND train_id = ?
                                """,
                            (
                                chat_id,
                                train_id,
                            ),
                        )
                        result = cursor.fetchone()
                        if result:
                            json_str, status = result  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
                            memory_ticket_dict = json.loads(
                                json_str
                            )  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON —Å—Ç—Ä–æ–∫—É
                            status = bool(int(status))
                        else:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                            memory_ticket_dict = {}
                            status = False

                        if not status:
                            logging.info(
                                f"Stopping tracking for train \
                                    {train_tracking}, user {chat_id}"
                            )
                            return
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã "soup"
                        cursor.execute(
                            """SELECT url FROM routes
                        WHERE route_id = ?""",
                            (route_id,),
                        )
                        url = cursor.fetchone()[0]
                        r = requests.get(url)

                        only_span_div_tag = SoupStrainer(["span", "div"])
                        soup = BeautifulSoup(
                            r.text, "lxml", parse_only=only_span_div_tag
                        )

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                        # (–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                        if check_depart_time(train_tracking, soup) < 600:
                            bot.send_message(
                                chat_id,
                                f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–æ –∑–∞ 10 –º–∏–Ω"
                                f"–¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∞ {train_tracking}",
                            )
                            logging.info(
                                f"[thread exit] –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ 10 –º–∏–Ω/"
                                f"–¥–æ –æ—Ç–ø—Ä.: {train_tracking} –¥–ª—è {chat_id}"
                            )
                            return

                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∏–ª–µ—Ç–∞–º
                        ticket_dict = check_tickets_by_class(
                            train_tracking, soup, chat_id
                        )

                        # –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∏–ª–µ—Ç–∞—Ö
                        #  + –±—ã—Å—Ç—Ä–∞—è —Å—Å—ã–ª–∫–∞

                        if ticket_dict != memory_ticket_dict:
                            markup_url = (
                                types.InlineKeyboardMarkup()
                            )  # –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏
                            url_to_ticket = types.InlineKeyboardButton(
                                "–ù–∞ —Å–∞–π—Ç", url=user_data[chat_id]["url"]
                            )
                            markup_url.row(url_to_ticket)
                            bot.send_message(
                                chat_id,
                                f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ {train_tracking}:\
                                    \n{ticket_dict}",
                                reply_markup=markup_url,
                            )

                            json_ticket_dict = json.dumps(memory_ticket_dict)
                            cursor.execute(
                                """
                                UPDATE tracking SET json_ticket_dict = ?
                                WHERE chat_id = ? AND train_id = ?
                                """,
                                (
                                    json_ticket_dict,
                                    chat_id,
                                    train_id,
                                ),
                            )

                        conn.commit()
                    except sqlite3.Error as e:
                        logging.error(
                            f"Database error in tracking loop: {str(e)}"
                        )
                        time.sleep(60)  # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω
                        continue
                    # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
                    except TypeError as e:
                        logging.error(
                            f"Database error in tracking loop: {str(e)}"
                        )
                        raise
                    except requests.exceptions.RequestException as e:
                        logging.error(
                            f"Database error in tracking loop: {str(e)}"
                        )
                        raise
                    finally:
                        cursor.close()
                        conn.close()
                time.sleep(randint(300, 600))
        except Exception as e:
            logging.error(
                f"Tracking loop crashed for train {train_tracking}, \
                          user {chat_id}: {str(e)}",
                exc_info=True,
            )
            error_msg = "‚ùó –û—à–∏–±–∫–∞ –±–æ—Ç–∞\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
            bot.send_message(chat_id, error_msg)
            start(chat_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    # –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã—Ç—å –≤ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞
    # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É-–¥—Ä—É–≥—É—é,
    # –∞ –∫ —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –±—É–¥—É—Ç –¥—Ä—É–≥–∏–º–∏.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–æ–≤–µ—Ç –±–æ—Ç–∞, –∏ chat_id –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è,
    # –∞ —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ —Ç–æ–≥–æ —é–∑–µ—Ä–∞.
    thread = threading.Thread(
        target=tracking_loop,
        args=(chat_id, train_tracking, train_id, route_id, url),
        name=f"tracking_{train_tracking}_{chat_id}",
    )

    thread.start()
    bot.send_message(
        chat_id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_tracking} –∑–∞–ø—É—â–µ–Ω–æ."
    )


# =============================================================================


# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–µ–∑–¥–æ–≤, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# –¥–ª—è –∫–æ–º–∞–Ω–¥ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –û—Å—Ç–∞–Ω–æ–≤–∞
def get_track_list(message):

    chat_id = message.chat.id

    try:
        with db_lock:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∏—Ç—å route_id –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É URL
            cursor.execute(
                """
                SELECT  tracking_id, t.train_number,
                r.city_from, r.city_to, r.date, status
                FROM tracking tr
                JOIN trains t ON tr.train_id = t.train_id
                JOIN routes r ON t.route_id = r.route_id
                WHERE tr.chat_id = ?
            """,
                (chat_id,),
            )

            track_list = cursor.fetchall()

            conn.commit()

    except sqlite3.Error as e:
        logging.error(f"Database error in get_track_list: {str(e)}")
        raise
    finally:
        # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
        try:
            if cursor:
                cursor.close()
            if conn:
                conn.close()
        except (sqlite3.Error, AttributeError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

    return track_list  # –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–µ–∑–¥–æ–≤
@bot.message_handler(commands=["show_track_list"])
@ensure_start
def show_track_list(message):
    reply = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    track_list = list(filter(lambda x: x[5] == 1, get_track_list(message)))
    # tracking_id -> int(),
    # t.train_number -> str(),
    # r.city_from, r.city_to, r.date -> str(),
    # status -> int()
    if track_list:
        reply_edit = map(
            lambda x: f"üöÜ {x[1]} {x[2]}‚û°Ô∏è{x[3]}\nüïí {x[4]} \n{'-'*5}",
            track_list,
        )
        reply = "\n".join(reply_edit)
    bot.reply_to(message, f"{reply}")


# –û—Å—Ç–∞–Ω–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–µ–∑–¥–∞
@bot.message_handler(commands=["stop_track_train"])
@ensure_start
def stop_track_train(message):
    track_list = list(filter(lambda x: x[5] == 1, get_track_list(message)))
    # tracking_id -> int(),
    # t.train_number -> str(),
    # r.city_from, r.city_to, r.date -> str(),
    # status -> int()
    if track_list:
        markup = types.InlineKeyboardMarkup()
        for x in track_list:
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            reply = f"üö´ {x[1]} {x[2]}‚û°Ô∏è{x[3]} üïí {x[4]}"
            markup.row(
                types.InlineKeyboardButton(
                    f"{reply}",
                    callback_data=f"{x[0]}:{x[1]}:{x[4]}_stop_tracking",
                )
            )
        bot.reply_to(message, "–í—ã–±—Ä–∞—Ç—å —É–¥–∞–ª—è–µ–º—ã–π –ø–æ–µ–∑–¥: ", reply_markup=markup)
    else:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç")


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.callback_query_handler(
    func=lambda callback: callback.data.endswith("_stop_tracking")
)
@ensure_start
def stop_tracking_train_by_number(callback):
    bot.answer_callback_query(callback.id)
    # tracking_id, t.train_number, r.date
    train_stop_tracking = callback.data.split("_")[0].split(':')
    chat_id = callback.message.chat.id
    tracking_id = train_stop_tracking[0]
    train_number = train_stop_tracking[1]
    date = train_stop_tracking[2]

    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            # –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
            cursor.execute(
                """
                UPDATE tracking SET status = ?
                WHERE tracking_id = ?
            """,
                (
                    False,
                    tracking_id,
                ),
            )
            conn.commit()
            logging.info(
                f"Train_number: {train_number} \
                    stop tracking for chat_id: {chat_id}, date: {date}"
            )
        except sqlite3.Error as e:
            logging.error(
                f"Database error in stop_tracking_train_by_number: {str(e)}"
            )
            raise
        finally:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

    bot.send_message(
        chat_id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_number}/{date} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
    )


# ============================================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏


# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
def normalize_city_name(name):
    return name.strip().lower().capitalize()


# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º "—Å–µ–≥–æ–¥–Ω—è –∏ –¥–∞–ª–µ–µ"
def normalize_date(date_str):
    formats = [
        "%d.%m.%Y",
        "%d/%m/%Y",
        "%d-%m-%Y",
        "%Y-%m-%d",
        "%d %m %Y",
        "%Y %m %d",
    ]
    today = datetime.today().date()
    for fmt in formats:
        try:
            dt = datetime.strptime(date_str.strip(), fmt)
            # –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
            if dt.date() < today:
                raise PastDateError("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º")
            # –î–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–ª–µ–µ 59 —Å—É—Ç–æ–∫
            if (dt.date() - today).days > 59:
                raise FutureDateError("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞ 60 —Å—É—Ç–æ–∫")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return dt.strftime("%Y-%m-%d")
        # –î–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º"
        except PastDateError as e:
            # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            raise e

        except FutureDateError as e:
            # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            raise e

        except ValueError:
            continue

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª:
    raise ValueError(
        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\
–ü—Ä–∏–º–µ—Ä—ã: {today.strftime('%Y-%m-%d')}, \
{today.strftime('%d %m %Y')}, \
{today.strftime('%Y %m %d')}"
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç–∞
def check_tickets_by_class(train_number, soup, chat_id):
    train_info = soup.select(
        f'div.sch-table__row[data-train-number^="{train_number}"]'
    )

    # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
    try:
        selling_allowed = train_info[0]["data-ticket_selling_allowed"]
    except IndexError:
        selling_allowed = "none"

    if selling_allowed == "true":
        return get_tickets_by_class(train_number, soup)
    elif selling_allowed == "false":
        return "–ú–µ—Å—Ç –Ω–µ—Ç"
    else:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–µ"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
def get_tickets_by_class(train_number, soup):
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –º–µ—Å—Ç –∏ –∫–ª–∞—Å—Å–æ–≤ –≤–∞–≥–æ–Ω–æ–≤
    train_info = soup.select(
        f'div.sch-table__row[data-train-number^="{train_number}"]'
    )
    # –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤–∞–≥–æ–Ω–æ–≤ –∏ –º–µ—Å—Ç–∞
    class_names = train_info[0].find_all(
        class_="sch-table__t-quant js-train-modal dash"
    )
    # –≤—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è —Å –∑–∞–º–µ–Ω–æ–π –Ω–æ–º–µ—Ä–∞ –Ω–∞ –∏–º—è –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    # –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    tickets_by_class = {}
    for class_n in class_names:
        name = seats_type_dict[class_n["data-car-type"]]  # type: ignore
        try:
            seats_num = int(class_n.select_one("span").text)  # type: ignore
        except ValueError:
            seats_num = "–ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—Ç"
            tickets_by_class[name] = "\u221e"
            continue
        if name in tickets_by_class:
            tickets_by_class[name] += seats_num
        else:
            tickets_by_class[name] = seats_num
    return tickets_by_class


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
def check_depart_time(train_number, soup):
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –º–µ—Å—Ç –∏ –∫–ª–∞—Å—Å–æ–≤ –≤–∞–≥–æ–Ω–æ–≤
    train_info = soup.select(
        f'div.sch-table__row[data-train-number^="{train_number}"] \
            div.sch-table__time.train-from-time'
    )
    # –≤—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    return int(train_info[0]["data-value"])


# ============================================================================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã routes
def cleanup_expired_routes():
    while True:
        with db_lock:
            try:
                conn = sqlite3.connect('tracking_train.sqlite3')
                cursor = conn.cursor()

                # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                today = datetime.now().strftime('%Y-%m-%d')

                # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π
                cursor.execute(
                    """
                    SELECT route_id FROM routes
                    WHERE date < ?
                """,
                    (today,),
                )
                expired_routes = cursor.fetchall()

                if expired_routes:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ tracking
                    cursor.execute(
                        """
                        DELETE FROM tracking
                        WHERE train_id IN (
                            SELECT train_id FROM trains
                            WHERE route_id IN (
                                SELECT route_id FROM routes
                                WHERE date < ?
                            )
                        )
                    """,
                        (today,),
                    )

                    # –£–¥–∞–ª—è–µ–º –ø–æ–µ–∑–¥–∞
                    cursor.execute(
                        """
                        DELETE FROM trains
                        WHERE route_id IN (
                            SELECT route_id FROM routes
                            WHERE date < ?
                        )
                    """,
                        (today,),
                    )

                    # –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç—ã
                    cursor.execute(
                        """
                        DELETE FROM routes
                        WHERE date < ?
                    """,
                        (today,),
                    )

                    conn.commit()
                    logging.info(
                        f"–£–¥–∞–ª–µ–Ω–æ {len(expired_routes)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"
                    )
            except sqlite3.Error as e:
                logging.error(
                    f"Database error in cleanup_expired_routes: {str(e)}"
                )
                raise
            finally:
                try:
                    if cursor:
                        cursor.close()
                    if conn:
                        conn.close()
                except (sqlite3.Error, AttributeError) as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        time.sleep(2 * 60 * 60)


# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
def monitor_threads_track():
    while True:
        active_threads = [
            f"Thread: {t.name}, ID: {t.ident}" for t in threading.enumerate()
        ]

        logging.debug(f"Active threads: {len(active_threads)}")
        for t in active_threads:
            logging.debug(f"Thread {t} is alive")
        time.sleep(3600)


def start_background_tasks():
    # –ü–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    cleanup_thread = threading.Thread(
        target=cleanup_expired_routes,
        name="route_cleanup",
        daemon=True,  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ main-–ø–æ—Ç–æ–∫–∞
    )
    cleanup_thread.start()

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    monitor_threads = threading.Thread(
        target=monitor_threads_track,
        name="monitor_threads",
        daemon=True,  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ main-–ø–æ—Ç–æ–∫–∞
    )
    monitor_threads.start()


# =============================================================================
# –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã


# –û—Å—Ç–∞–Ω–æ–≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text.startswith('/stop'))
def universal_stop_handler(message):
    stop(message)


@ensure_start
def stop(message):
    chat_id = message.chat.id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton("–î–∞", callback_data="confirm_stop")
    btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_stop")
    markup.add(btn_yes, btn_no)

    bot.send_message(
        chat_id,
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n–∏ –æ—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É?",
        reply_markup=markup,
    )


# #!!!–î–û–ë–ê–í–ò–¢–¨
# # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
# def clear_chat_history(chat_id, limit=100):
#     try:
#         messages = bot.get_chat_history(chat_id, limit=limit)
#         for msg in messages:
#             try:
#                 bot.delete_message(chat_id, msg.message_id)
#                 time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
#             except:
#                 continue
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "cancel_stop")
def cancel_stop(call):
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(chat_id, call.message.message_id)
    bot.send_message(chat_id, "üü¢ –ë–æ—Ç –≤ —Ä–∞–±–æ—Ç–µ")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_stop")
def confirm_stop(call):
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(chat_id, call.message.message_id)

    # #!!!–î–û–ë–ê–í–ò–¢–¨
    # # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
    # clear_chat_history(chat_id)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞

    # –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è
    # –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ False
    # –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–µ–∑–¥–æ–≤, —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Å–µ—Å—Å–∏—é

    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            cursor.execute(
                """
                UPDATE tracking SET status = ?
                WHERE chat_id = ?
            """,
                (
                    False,
                    chat_id,
                ),
            )
            cursor.execute(
                "DELETE FROM tracking WHERE chat_id = ?", (chat_id,)
            )
            cursor.execute("DELETE FROM users WHERE chat_id = ?", (chat_id,))
            conn.commit()
            logging.info(
                f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω chat_id: {chat_id}."
                f"–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω"
            )
        except sqlite3.Error as e:
            logging.error(
                f"Database error in cleanup_expired_routes: {str(e)}"
            )
            raise
        finally:
            try:
                if cursor:
                    cursor.close()
                if conn:
                    conn.close()
            except (sqlite3.Error, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")
    del_user_data(chat_id)
    bot.send_message(chat_id, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß–∞—Ç –æ—á–∏—â–µ–Ω.")


# –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@bot.message_handler(commands=[stop_code])  # type: ignore
def exit_admin(message):
    chat_id = message.chat.id

    with db_lock:
        try:
            conn = sqlite3.connect('tracking_train.sqlite3')
            cursor = conn.cursor()
            cursor.execute(
                """
                UPDATE tracking SET status = ?
                WHERE chat_id = ?
            """,
                (
                    False,
                    chat_id,
                ),
            )
            cursor.execute(
                "DELETE FROM tracking WHERE chat_id = ?", (chat_id,)
            )
            cursor.execute("DELETE FROM users WHERE chat_id = ?", (chat_id,))
            conn.commit()
        finally:
            cursor.close()
            conn.close()

    bot.send_message(chat_id, "–í—ã—Ö–æ–¥ –∏–∑ –ü–û")

    def stop_bot():
        bot.stop_polling()
        os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥

    threading.Thread(target=stop_bot).start()


# =============================================================================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
    start_background_tasks()
    attempt_counter = 1
    max_attempts = 3
    min_delay = 15
    while True:
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 3 –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        try:
            try:
                bot.delete_webhook()  # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
                time.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–º Telegram
            except apihelper.ApiTelegramException as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ "webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                if "webhook is not set" not in str(e):
                    logging.error(f"Webhook deletion failed: {e}")
                    raise  # –ü—Ä–æ–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ API
            logging.info("Starting bot polling...")
            bot.polling(non_stop=True, timeout=90, long_polling_timeout=60)
            break

        # –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        except requests.exceptions.ReadTimeout as e:
            logging.error(f"Timeout error: {e}. Restarting bot...")
            attempt_counter += 1
            time.sleep(min_delay * attempt_counter)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        except Exception as e:
            logging.error(f"Attempt {attempt_counter} failed: {str(e)}")
            attempt_counter += 1
            time.sleep(min_delay * attempt_counter)
        if attempt_counter > max_attempts:
            logging.critical("Max retries exceeded")
            raise
