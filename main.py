import calendar
import json
import logging
import os
import queue

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
import threading
import time
from collections import defaultdict
from copy import deepcopy
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler
from random import randint
from urllib.parse import quote

# import sqlite3
import flask
import psycopg2
import requests

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –±–æ—Ç–∞
import telebot
from bs4 import BeautifulSoup

# –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
from bs4.filter import SoupStrainer
from psycopg2 import pool  # –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
from telebot import apihelper, types

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π
from all_stations_list import all_station_list, all_station_list_lower
from token_info import (
    db_host,
    db_name,
    db_password,
    db_port,
    db_user,
    stop_code,
    token,
    web_port,
    webhook_url,
)


# –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –¥–ª—è "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º"
class PastDateError(ValueError):
    pass


# –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –¥–ª—è "–î–∞—Ç–∞ –≤ –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º"
class FutureDateError(ValueError):
    pass


# –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –¥–ª—è "–û—à–∏–±–∫–∞ —Å–∞–π—Ç–∞"
class SiteResponseError(Exception):
    pass


# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä-–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
seats_type_dict = {
    "0": "–ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ üö∂‚Äç‚ôÇÔ∏è",
    "1": "–û–±—â–∏–π üöÉ",
    "2": "–°–∏–¥—è—á–∏–π üí∫",
    "3": "–ü–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã–π üõèÔ∏è",
    "4": "–ö—É–ø–µ–π–Ω—ã–π üö™üõèÔ∏è",
    "5": "–ú—è–≥–∫–∏–π üõãÔ∏è",
    "6": "–°–í üëë",
}


# –í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = defaultdict(
    lambda: {}
)  # –ö–ª—é—á - chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ë–î –∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ user_data
db_lock = threading.Lock()
user_data_lock = threading.Lock()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        'train_bot.log', maxBytes=10 * 1024 * 1024, backupCount=3  # 10 MB
    )
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)


setup_logging()


def get_user_data(chat_id):
    logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ chat_id: {chat_id}")
    with user_data_lock:
        return deepcopy(user_data.get(chat_id, {}))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏


def update_user_data(chat_id, key, value):
    with user_data_lock:
        if chat_id not in user_data:
            user_data[chat_id] = {}
        user_data[chat_id][key] = value


def set_user_data(chat_id, data_dict):
    with user_data_lock:
        user_data[chat_id] = deepcopy(data_dict)


def del_user_data(chat_id):
    with user_data_lock:
        user_data.pop(chat_id, None)
        logging.debug(f"user_data –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è {chat_id}: {user_data}")


# -----------------------------------------------------------------------------
# # –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ


# Postgres –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
db_pool = pool.SimpleConnectionPool(
    minconn=1,
    maxconn=10,
    dbname=db_name,
    user=db_user,
    password=db_password,
    host=db_host,
    port=db_port,
)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
def execute_db_query(
    query, params=None, fetchone=False, fetchall=False, commit=False
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL.
    """
    conn = None
    cursor = None
    try:
        conn = db_pool.getconn()
        cursor = conn.cursor()
        cursor.execute(query, params or ())

        result = None
        if fetchone:
            result = cursor.fetchone()
        elif fetchall:
            result = cursor.fetchall()

        if commit:
            conn.commit()

        return result
    except Exception as e:
        if conn:
            conn.rollback()
        logging.error(f"Database error in execute_db_query: {e}")
        raise
    finally:
        try:
            if cursor:
                cursor.close()
            if conn:
                db_pool.putconn(conn)
        except Exception as e:
            logging.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ execute_db_query: {e}"
            )
            raise


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
try:
    result = execute_db_query("SELECT 1", fetchone=True)
    logging.debug(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ c –ë–î —É—Å–ø–µ—à–Ω–æ: {result}")
except Exception as e:
    logging.debug(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
# ----------------------------------------------------------------------------
# –û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è –ë–î
db_queue = queue.Queue()


# –ü–æ—Ç–æ–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ë–î, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def db_worker():
    while True:
        func, args, result_queue = db_queue.get()  # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        try:
            result = func(*args)  # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            result_queue.put(result)  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ db_worker: {e}")
            result_queue.put(e)  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        db_queue.task_done()


# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
threading.Thread(target=db_worker, daemon=True).start()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
def async_db_call(func, *args, **kwargs):
    # –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
    result_queue = queue.Queue()
    # –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥—å
    db_queue.put((func, args, result_queue))
    # –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    result = result_queue.get()
    if isinstance(result, Exception):
        raise result
    return result


# ----------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î
def add_user_db(chat_id):
    try:
        execute_db_query(
            """
            INSERT INTO users (chat_id)
            VALUES (%s)
            ON CONFLICT (chat_id) DO NOTHING
        """,
            (chat_id,),
            commit=True,
        )
        logging.info(f"User {chat_id} added to database")
    except Exception as e:
        logging.error(f"Database error in add_user_db: {str(e)}")
        raise


def add_route_db(city_from, city_to, date, url):
    try:
        # –ë–ª–∞–≥–æ–¥–∞—Ä—è URL UNIQUE –Ω–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
        execute_db_query(
            """
            INSERT INTO routes (city_from, city_to, date, url)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (url) DO NOTHING
            """,
            (city_from, city_to, date, url),
            commit=True,
        )
        logging.info(f"Route {city_from}-{city_to}-{date} added to database")
    except Exception as e:
        logging.error(f"Database error in add_route_db: {str(e)}")
        raise


def add_train_db(train, time_depart, time_arriv, url):
    try:
        result = execute_db_query(
            "SELECT route_id FROM routes WHERE url = %s",
            (url,),
            fetchone=True,
        )

        if result is None:
            # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –æ—à–∏–±–∫–∏.
            # –í –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
            logging.warning(f"No route found for URL: {url}")
            return

        route_id = result[0]
        execute_db_query(
            """
            INSERT INTO trains
            (route_id, train_number, time_depart, time_arriv)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT
            (route_id, train_number, time_depart, time_arriv) DO NOTHING
            """,
            (route_id, train, time_depart, time_arriv),
            commit=True,
        )

        logging.info(
            f"Train: {train} for route_id: {route_id} added to database"
        )
    except Exception as e:
        logging.error(f"Database error in add_train_db: {str(e)}")
        raise


def add_tracking_db(chat_id, train_selected, ticket_dict, url):

    try:
        result = execute_db_query(
            "SELECT route_id FROM routes WHERE url = %s", (url,), fetchone=True
        )
        if result is None:
            logging.warning(f"No route found for URL: {url}")
            return
        route_id = result[0]

        # –ü–æ–ª—É—á–∏—Ç—å train_id –ø–æ route_id –∏ –Ω–æ–º–µ—Ä—É –ø–æ–µ–∑–¥–∞
        result = execute_db_query(
            """
            SELECT train_id FROM trains
            WHERE route_id = %s AND train_number = %s
            """,
            (route_id, train_selected),
            fetchone=True,
        )
        if not result:
            logging.warning(
                f"Train not found for route_id={route_id}, "
                f"number={train_selected}"
            )
            return
        train_id = result[0]

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –±–∏–ª–µ—Ç–æ–≤ –≤ JSON
        json_ticket_dict = json.dumps(ticket_dict)

        # –í—Å—Ç–∞–≤–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è
        execute_db_query(
            """
            INSERT INTO tracking (chat_id, train_id, json_ticket_dict)
            VALUES (%s, %s, %s)
            ON CONFLICT (chat_id, train_id) DO NOTHING
            """,
            (chat_id, train_id, json_ticket_dict),
            commit=True,
        )
        logging.info(f"Train_id: {train_id} added to db_tracking_list")
    except Exception as e:
        logging.error(f"Database error in add_tracking_db: {str(e)}")
        raise


# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –∏–∑ –ë–î
def get_trains_list_db(url):
    try:
        # –ü–æ–ª—É—á–∏—Ç—å route_id –ø–æ URL
        result = execute_db_query(
            "SELECT route_id FROM routes WHERE url = %s", (url,), fetchone=True
        )
        if not result:
            logging.warning(f"No route found for URL: {url}")
            return []
        route_id = result[0]
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø–æ route_id
        trains_list = execute_db_query(
            """
            SELECT train_number, time_depart, time_arriv FROM trains
            WHERE route_id = %s
            ORDER BY time_depart
            """,
            (route_id,),
            fetchall=True,
        )
    except Exception as e:
        logging.error(f"Database error in get_trains_list_db: {str(e)}")
        raise
    return trains_list


# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–∏–∫–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∞
def get_loop_data_list(chat_id, train_tracking, url):
    try:
        query = """
            SELECT r.route_id, t.train_id,
            EXISTS (
                SELECT 1 FROM tracking tr
                WHERE tr.train_id = t.train_id AND tr.chat_id = %s
            ) AS is_tracked
            FROM routes r
            JOIN trains t ON r.route_id = t.route_id
            WHERE r.url = %s AND t.train_number = %s
            LIMIT 1
        """
        resp = execute_db_query(
            query, (chat_id, url, train_tracking), fetchone=True
        )
        if not resp:
            logging.warning(
                f"No matching train or route found for chat_id: "
                f"{chat_id}, url: {url}, train: {train_tracking}"
            )
            return None
        # –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        count_result = execute_db_query(
            """
            SELECT COUNT(*) FROM tracking WHERE chat_id = %s
            """,
            (chat_id,),
            fetchone=True,
        )
        count = count_result[0] if count_result else 0
        result = {
            "route_id": resp[0],
            "train_id": resp[1],
            "status_exist": resp[2],
            "count": count,
        }
        return result
    except Exception as e:
        logging.error(f"Database error in get_loop_data_list: {str(e)}")
        raise


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
def get_fresh_loop(
    chat_id,
    train_id,
):
    try:
        result = execute_db_query(
            """
            SELECT json_ticket_dict FROM tracking
            WHERE chat_id = %s AND train_id = %s
            """,
            (chat_id, train_id),
            fetchone=True,
        )
        if result:
            json_str = result[0]  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
            memory_ticket_dict = json.loads(json_str)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON —Å—Ç—Ä–æ–∫—É
            logging.debug(
                f"FG2 memory_ticket_dict, chat_id, train_id:\n"
                f" {memory_ticket_dict, chat_id, train_id}"
            )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            memory_ticket_dict = {}
        return memory_ticket_dict
    except Exception as e:
        logging.error(f"Database error in get_fresh_loop: {str(e)}")
        raise


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–µ–∑–¥–æ–≤, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# –¥–ª—è –∫–æ–º–∞–Ω–¥ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –û—Å—Ç–∞–Ω–æ–≤–∞
def get_track_list(message):

    chat_id = message.chat.id

    try:
        track_list = execute_db_query(
            """
            SELECT tracking_id, t.train_number,
                   r.city_from, r.city_to, r.date, t.time_depart
            FROM tracking tr
            JOIN trains t ON tr.train_id = t.train_id
            JOIN routes r ON t.route_id = r.route_id
            WHERE tr.chat_id = %s
            """,
            (chat_id,),
            fetchall=True,
        )
        return track_list

    except Exception as e:
        logging.error(f"Database error in get_track_list: {str(e)}")
        raise


# –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
def del_tracking_db(
    chat_id,
    train_id,
):
    try:
        execute_db_query(
            """
            DELETE FROM tracking
            WHERE chat_id = %s AND train_id = %s
            """,
            (chat_id, train_id),
            commit=True,
        )

    except Exception as e:
        logging.error(f"Database error in del_tracking_db: {str(e)}")
        raise


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ü–∏–∫–ª–µ
def update_tracking_loop(
    json_ticket_dict,
    chat_id,
    train_id,
):
    try:
        execute_db_query(
            """
            UPDATE tracking
            SET json_ticket_dict = %s
            WHERE chat_id = %s AND train_id = %s
            """,
            (json_ticket_dict, chat_id, train_id),
            commit=True,
        )

    except Exception as e:
        logging.error(f"Database error in update_tracking_loop: {str(e)}")
        raise


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def check_user_exists(chat_id):
    try:
        result = execute_db_query(
            """
            SELECT EXISTS(SELECT 1 FROM users WHERE chat_id = %s)
            """,
            (chat_id,),
            fetchone=True,
        )
        return bool(result[0]) if result else False
    except Exception as e:
        logging.error(f"Database error in check_user_exists: {str(e)}")
        raise


# ----------------------------------------------------------------------------
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ü—Ä–æ–≤–µ—Ä–∫–∞ "start" –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def ensure_start(func):
    def wrapper(message):
        try:
            chat_id = message.chat.id
        except AttributeError:
            chat_id = message.message.chat.id  # –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è callback
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        if not async_db_call(check_user_exists, chat_id):
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
            return
        return func(message)

    return wrapper


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def with_command_intercept(func):
    def wrapper(message):
        text = message.text or ""
        chat_id = message.chat.id
        if text.startswith("/add_train_last_route"):
            bot.clear_step_handler_by_chat_id(chat_id)
            show_train_list(message)
            return
        if text.startswith("/add_train_new_route"):
            bot.clear_step_handler_by_chat_id(chat_id)
            start(message)
            return
        if text.startswith("/stop_track_train"):
            bot.clear_step_handler_by_chat_id(chat_id)
            stop_track_train(message)
            return
        if text.startswith("/show_track_list"):
            bot.clear_step_handler_by_chat_id(chat_id)
            show_track_list(message)
            return
        if text.startswith("/stop"):
            bot.clear_step_handler_by_chat_id(chat_id)
            stop(message)
            return
        if text.startswith("/start"):
            bot.clear_step_handler_by_chat_id(chat_id)
            start(message)
            return
        if text.startswith(f"/{stop_code}"):
            bot.clear_step_handler_by_chat_id(chat_id)
            exit_admin(message)
            return
        # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
        return func(message)

    return wrapper


# =============================================================================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö


# –°–æ–∑–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram.
app = flask.Flask(__name__)
bot = telebot.TeleBot(token, threaded=True)  # type: ignore


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram (webhook endpoint)
"""
–≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç —Å–ª—É—à–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –ø–æ –ø—É—Ç–∏ /<—Ç–æ–∫–µ–Ω>
Telegram –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
–µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (bot.set_webhook(...)).
URL /TOKEN ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç —á—É–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

"""


@app.route(f'/{token}', methods=['POST'])
def webhook():
    try:
        json_str = flask.request.data.decode("utf-8")
        # –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç telebot.types.Update:
        update = telebot.types.Update.de_json(json_str)
        logging.debug("FLAG Webhook –ø–æ–ª—É—á–µ–Ω!")
        if update is not None:
            # –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ polling, –Ω–æ –≤—Ä—É—á–Ω—É—é:
            bot.process_new_updates([update])  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ None
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    return "ok", 200  # Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


"""
–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.
–ï—Å–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ https://your-domain.com/, —Ç–æ:
"Bot is alive" ‚Äî –∑–Ω–∞—á–∏—Ç Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
"""


@app.route("/", methods=["GET"])
def index():
    return "Bot is alive", 200


# ==============================================


# –ó–∞–ø—É—Å–∫ —á–∞—Ç–∞. –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# (—Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ª–æ–≤–∞—Ä—å user_data
# —Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–µ–π –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@bot.message_handler(commands=["start"])
def start(message):
    try:
        chat_id = message.chat.id
        try:
            f_name = message.chat.get('first_name', None)
            l_name = message.chat.get('last_name', None)
        except AttributeError:
            f_name = 'continue'
            l_name = 'continue'
        logging.info(f"User {f_name} {l_name} {chat_id} started the bot")

        # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        bot.send_chat_action(chat_id, 'typing')  # Show typing indicator
        time.sleep(1)  # Optional delay

        bot.send_message(chat_id, "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ")
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # "–í—ã–∑–≤–∞—Ç—å next_step_handler –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.register_next_step_handler(message, get_city_from)
        set_user_data(chat_id, {"step": "start"})

        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        async_db_call(add_user_db, chat_id)
    except Exception as e:
        logging.error(f"Error in start command: {str(e)}", exc_info=True)
        raise


# –ß—Ç–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–π
@with_command_intercept
def get_city_from(message):
    # if message.text.startswith('/stop'):
    #     # –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞
    #     bot.register_next_step_handler(message, stop)
    #     return
    chat_id = message.chat.id
    city_from = normalize_city_name(message.text)
    if city_from not in all_station_list:
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        examples = '\n'.join(
            [x for x in all_station_list if x.startswith(city_from[:3])]
        )
        answer = (
            "‚úèÔ∏è –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.\n"
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n"
            + int(bool(examples)) * f"–í–∞—Ä–∏–∞–Ω—Ç—ã:\n {examples}"
        )

        bot.send_message(chat_id, answer)
        # –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, get_city_from)
        return
    update_user_data(chat_id, "city_from", city_from)
    bot.send_message(chat_id, "–°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è: ")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è
    bot.register_next_step_handler(message, get_city_to)


# –ß—Ç–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–π
@with_command_intercept
def get_city_to(message):
    # if message.text.startswith('/stop'):
    #     # –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞
    #     bot.register_next_step_handler(message, stop)
    #     return
    chat_id = message.chat.id
    city_to = normalize_city_name(message.text)
    if city_to not in all_station_list:
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        examples = '\n'.join(
            [x for x in all_station_list if x.startswith(city_to[:3])]
        )
        answer = (
            "‚úèÔ∏è –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.\n"
            + "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n"
            + int(bool(examples)) * f"–í–∞—Ä–∏–∞–Ω—Ç—ã:\n {examples}"
        )

        bot.send_message(chat_id, answer)
        # –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, get_city_to)
        return
    update_user_data(chat_id, "city_to", city_to)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ä–∞–∑—É
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ä–∞–∑—É
    msg = bot.send_message(
        chat_id,
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=generate_calendar(),
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    bot.register_next_step_handler(msg, get_date)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã


# –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@with_command_intercept
def get_date(message):
    chat_id = message.chat.id
    try:
        date = normalize_date(message.text)
        update_user_data(chat_id, "date", date)
        get_trains_list(message)
        return
    except (PastDateError, FutureDateError, ValueError) as e:
        logging.info(f"FLAG get_date   {e}")
        bot.send_message(chat_id, f"‚úèÔ∏è {e}.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã")
        # –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞
        bot.register_next_step_handler(message, get_date)
        return
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è get_trains_list(): {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\n–ü–æ—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        # –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞
        stop(message)
        return


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
def get_trains_list(message):
    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bot.send_chat_action(message.chat.id, 'typing')  # Show typing indicator
    time.sleep(1)  # Optional delay
    bot.send_message(message.chat.id, "–ò–¥—ë—Ç –ø–æ–∏—Å–∫ üîç")  # Send your custom text
    chat_id = message.chat.id

    user_info = get_user_data(chat_id)
    if not user_info:
        logging.error(f"No user data for chat_id {chat_id}")
        raise ValueError("User data not found")

    try:
        q_from = quote(user_info["city_from"])
        q_to = quote(user_info["city_to"])
        date = user_info["date"]
    except KeyError as e:
        logging.error(f"Missing key in user data: {e}")
        raise ValueError(f"Incomplete user data: missing {e}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã "soup"
    url = f"https://pass.rw.by/ru/route/?from={q_from}&to={q_to}&date={date}"
    update_user_data(chat_id, "url", url)
    try:
        r = requests.get(url)
        logging.info(f"FLAG get_trains_list   {r.status_code}")
        if r.status_code != 200:
            error_msg = (
                f"Fail response in get_trains_list. Code {r.status_code}"
            )
            logging.debug(f"{error_msg}, for user {chat_id}")
            raise SiteResponseError(
                f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–∞–π—Ç–∞. –ö–æ–¥ {r.status_code}"
            )

        only_span_div_tag = SoupStrainer(["span", "div"])
        soup = BeautifulSoup(r.text, "lxml", parse_only=only_span_div_tag)

        response_time = r.elapsed.total_seconds()  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        logging.info(
            f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç \n{user_data[chat_id]}"
            f"–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {response_time:.3f} —Å–µ–∫—É–Ω–¥"
        )

    except Exception as e:
        logging.error(f"Server request error: {e}")
        bot.send_message(
            chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞"
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        start(message)
        return
    # –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç –≤ –ë–î
    async_db_call(
        add_route_db,
        user_info["city_from"],
        user_info["city_to"],
        date,
        url,
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    update_user_data(chat_id, "soup", soup)

    train_id_list = [
        i.text for i in soup.find_all("span", class_="train-number")
    ]

    if not train_id_list:
        bot.send_message(
            chat_id,
            "‚ùìüöÜ–ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\
                \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞",
        )
        start(message)
        return

    trains_list = []
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è
    for train in train_id_list:
        try:
            time_depart = soup.select(
                f'[data-train-number^="{train}"] \
                                    [data-sort="departure"]'
            )[0].text.strip()
            time_arriv = soup.select(
                f'[data-train-number^="{train}"] \
                                    [data-sort="arrival"]'
            )[0].text.strip()
        except Exception:
            time_depart, time_arriv = (
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            )
        trains_list.append([train, time_depart, time_arriv])
        # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∞ –≤ –ë–î
        async_db_call(add_train_db, train, time_depart, time_arriv, url)
        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤
    show_train_list(message)


@ensure_start
def show_train_list(message):
    chat_id = message.chat.id
    try:
        url = user_data[chat_id]["url"]
    except KeyError:
        bot.send_message(
            chat_id,
            "‚ùì–£—Ç–µ—Ä—è–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç.\
                \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞",
        )
        start(message)
        return

    trains_list = async_db_call(get_trains_list_db, url)
    markup = types.InlineKeyboardMarkup()
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

    for train in trains_list:
        markup.row(
            types.InlineKeyboardButton(
                f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train[0]} üïí {train[1]} ‚û°Ô∏è {train[2]}",
                callback_data=f"{train[0]}_selected",
            )
        )

    bot.send_message(
        chat_id,
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤: ",
        reply_markup=markup,
    )


# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç
@bot.callback_query_handler(
    func=lambda callback: callback.data.endswith("_selected")
)
@ensure_start
def select_train(callback):
    # –ú–Ω–∏–º—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    bot.answer_callback_query(callback.id)

    train_selected = callback.data.split("_")[0]
    chat_id = callback.message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏ –∑–¥–µ—Å—å, —Ç.–∫. –¥–∞–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç message
    soup = user_data[chat_id]["soup"]
    # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ "–ú–µ—Å—Ç –Ω–µ—Ç"
    ticket_dict = check_tickets_by_class(train_selected, soup, chat_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤, –Ω–æ –∑–¥–µ—Å—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞ —á—Ç–æ False
    # –ó–¥–µ—Å—å, —Ç.–∫. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –ø–æ–µ–∑–¥–æ–º
    markup = types.InlineKeyboardMarkup()

    # –ï—Å–ª–∏ '–ë–µ–∑ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç' –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–µ–∑–¥–∞
    if seats_type_dict["0"] in ticket_dict:
        btn_track = types.InlineKeyboardButton(
            "üîÑ –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∞–º",
            callback_data="re_get_trains_list",
        )
        markup.add(btn_track)

        bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_selected}\nüîï –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ—Ç",
            reply_markup=markup,
        )
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elif check_depart_time(train_selected, soup, train_id=None) <= 0:
        btn_track = types.InlineKeyboardButton(
            "üîÑ –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∞–º",
            callback_data="re_get_trains_list",
        )
        markup.add(btn_track)

        bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_selected}\n‚è∞ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è",
            reply_markup=markup,
        )
    else:
        btn_track = types.InlineKeyboardButton(
            "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å",
            callback_data=f"{train_selected}_start_tracking",
        )
        markup.add(btn_track)

        bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_selected}\n{ticket_dict}",
            reply_markup=markup,
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–≤, –µ—Å–ª–∏ –ø–æ–µ–∑–¥ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—Ç
@bot.callback_query_handler(
    func=lambda callback: callback.data == "re_get_trains_list"
)
@ensure_start
def re_get_trains_list(callback):
    bot.answer_callback_query(callback.id)  # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    show_train_list(callback.message)
    pass


# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.message_handler(commands=["add_train_last_route", "add_train_new_route"])
@ensure_start
def add_track_train(message):
    if message.text == "/add_train_new_route":
        start(message)
        pass
    elif message.text == "/add_train_last_route":
        show_train_list(message)
        pass


# –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∞ –≤ –ª–∏—Å—Ç —Å–ª–µ–∂–µ–Ω–∏—è
# –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∞ –≤ –ª–∏—Å—Ç —Å–ª–µ–∂–µ–Ω–∏—è


def tracking_loop(chat_id, train_tracking, train_id, route_id, url):
    logging.debug(f"Tracking train {train_tracking} for user {chat_id}")

    # –°—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    error_streak = 0
    max_errors = 10
    # # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ:  10 –æ—à–∏–±–æ–∫
    # # –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
    # start_night = datetime(year=1, month=1, day=1, hour=1).time()
    # end_night = datetime(year=1, month=1, day=1, hour=7).time()
    while True:
        try:
            # –í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è debug
            start_time_db_loop = time.time()

            try:
                # –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–ª–µ—Ç–µ
                memory_ticket_dict = async_db_call(
                    get_fresh_loop, chat_id, train_id
                )

                if not memory_ticket_dict:
                    logging.info(
                        f"Stopping tracking for train"
                        f"{train_tracking}, user {chat_id}"
                    )
                    return

                session = requests.Session()
                session.headers.update(
                    {
                        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64)"
                        + " AppleWebKit/537.36 (KHTML, like Gecko)"
                        + " Chrome/133.0.0.0 Safari/537.36",
                        "Accept": "*/*",
                        "Accept-Language": "en-GB,en-US;q=0.9,en;q=0.8,"
                        + "ru;q=0.7,it;q=0.6",
                        "Accept-Encoding": "gzip, deflate, br, zstd",
                        "Referer": f"{url}",
                        "X-Requested-With": "XMLHttpRequest",
                    }
                )
                r = session.get(url)
                if r.status_code != 200:
                    logging.warning(
                        f"Fail response. "
                        f"Code {r.status_code}, train {train_tracking} "
                        f"for user {chat_id}"
                    )
                    raise SiteResponseError(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–∞–π—Ç–∞. –ö–æ–¥ {r.status_code}"
                    )

                only_span_div_tag = SoupStrainer(["span", "div"])
                soup = BeautifulSoup(
                    r.text, "lxml", parse_only=only_span_div_tag
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                # (–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞ 15 –º–∏–Ω –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                if check_depart_time(train_tracking, soup, train_id) < 1000:

                    # –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    async_db_call(
                        del_tracking_db,
                        chat_id,
                        train_id,
                    )
                    bot.send_message(
                        chat_id,
                        f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
                        f" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∞ {train_tracking}",
                    )
                    logging.info(
                        f"[thread exit] –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ 15 –º–∏–Ω/"
                        f"–¥–æ –æ—Ç–ø—Ä.: {train_tracking} –¥–ª—è {chat_id}"
                    )
                    return

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∏–ª–µ—Ç–∞–º
                ticket_dict = check_tickets_by_class(
                    train_tracking, soup, chat_id
                )

                # –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∏–ª–µ—Ç–∞—Ö
                #  + –±—ã—Å—Ç—Ä–∞—è —Å—Å—ã–ª–∫–∞
                logging.debug(f"FLAG3  ticket_dict  {ticket_dict}")
                if ticket_dict != memory_ticket_dict:
                    markup_url = types.InlineKeyboardMarkup()  # –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏
                    url_to_ticket = types.InlineKeyboardButton(
                        "–ù–∞ —Å–∞–π—Ç", url=url
                    )
                    markup_url.row(url_to_ticket)
                    bot.send_message(
                        chat_id,
                        f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ {train_tracking}:\n" f"{ticket_dict}",
                        reply_markup=markup_url,
                    )

                    json_ticket_dict = json.dumps(ticket_dict)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ü–∏–∫–ª–µ
                    async_db_call(
                        update_tracking_loop,
                        json_ticket_dict,
                        chat_id,
                        train_id,
                    )
                end_time_db_loop = time.time()
                db_loop_time = end_time_db_loop - start_time_db_loop
                logging.debug(
                    f"–í—Ä–µ–º—è –∫ –ë–î –¥–ª—è {chat_id} –≤ —Ü–∏–∫–ª–µ loop \n\
                        {db_loop_time:.4f} —Å–µ–∫"
                )

            except psycopg2.Error as e:
                error_msg = f"Database error in tracking loop: {str(e)}"
                logging.warning(f"{error_msg}, chat_id: {chat_id}")
                raise
                # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            except TypeError as e:
                error_msg = f"Database error in tracking loop: {str(e)}"
                logging.warning(f"{error_msg}, chat_id: {chat_id}")
                raise
            except SiteResponseError as e:
                error_msg = f"Site error in tracking loop: {str(e)}"
                r_c = r.status_code
                logging.warning(f"{error_msg},resp:{r_c}, chat_id: {chat_id}")
                # –ó–∞–ø–æ–º–Ω–∏—Ç—å html –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–æ—Ç–∞
                logging.warning(f"–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ {r.text}")
                raise
            except requests.exceptions.SSLError as e:
                error_msg = f"SSL –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–µ–∑–¥–∞ {train_tracking}: {str(e)}"
                logging.warning(f"{error_msg}, chat_id: {chat_id}")
                raise
            except requests.exceptions.RequestException as e:
                error_msg = f"Database error in tracking loop: {str(e)}"
                logging.warning(f"{error_msg}, chat_id: {chat_id}")
                raise

        except Exception as e:
            logging.warning(
                f"Tracking loop crashed for train {train_tracking}, \
                    error_streak = {error_streak} user {chat_id}: {str(e)}",
                exc_info=True,
            )
            # # –ï—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ—á—å—é - –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞
            # current_time = datetime.now().time()
            # if start_night < current_time < end_night:
            #     max_errors = 20
            # else:
            #     max_errors = 5

            if error_streak >= max_errors:
                # –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                async_db_call(
                    del_tracking_db,
                    chat_id,
                    train_id,
                )
                error_msg = (
                    f"‚ùó –û—à–∏–±–∫–∞ –±–æ—Ç–∞\n"
                    f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_tracking} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                )
                bot.send_message(chat_id, error_msg)
                return

            error_streak += 1
            time.sleep(error_streak * 600)
            continue

        error_streak = 0
        time.sleep(randint(600, 800))


@bot.callback_query_handler(
    func=lambda callback: callback.data.endswith("_start_tracking")
)
@ensure_start
def start_tracking_train(callback):

    bot.answer_callback_query(callback.id)  # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º

    train_tracking = callback.data.split("_")[0]
    chat_id = callback.message.chat.id

    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bot.send_chat_action(chat_id, 'typing')  # Show typing indicator
    time.sleep(1)  # Optional delay

    url = user_data[chat_id]['url']

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
    try:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ-—Ü–∏–∏ –ø–æ –±–∏–ª–µ—Ç–∞–º –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂.
        r = requests.get(url)
        if r.status_code != 200:
            error_msg = (
                f"Fail response in start_tracking_train. Code {r.status_code}"
            )
            logging.error(f"{error_msg}, for user {chat_id}")
            raise SiteResponseError(
                f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–∞–π—Ç–∞. –ö–æ–¥ {r.status_code}"
            )

        only_span_div_tag = SoupStrainer(["span", "div"])
        soup = BeautifulSoup(r.text, "lxml", parse_only=only_span_div_tag)
        ticket_dict = check_tickets_by_class(train_tracking, soup, chat_id)

        loop_data_list = async_db_call(
            get_loop_data_list, chat_id, train_tracking, url
        )

        route_id = loop_data_list["route_id"]
        train_id = loop_data_list["train_id"]
        status_exist = loop_data_list["status_exist"]
        count = loop_data_list["count"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑–ª–∏—à–Ω–∏–π –ø–æ—Ç–æ–∫
        if status_exist:
            bot.send_message(
                chat_id,
                f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_tracking} —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.",
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 5 –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
        if count >= 5:
            bot.send_message(chat_id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π\n(max 5)")
            return

        # –í—Å—Ç–∞–≤–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è
        async_db_call(
            add_tracking_db,
            chat_id,
            train_tracking,
            ticket_dict,
            url,
        )

    except psycopg2.Error as e:
        logging.error(f"Database error in start_tracking_train: {str(e)}")
        raise

    except Exception as e:
        logging.error(f"Server request error: {e}")
        bot.send_message(
            chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞"
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        start(callback.message)
        return

    # –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # –õ—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    # –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã—Ç—å –≤ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞
    # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É-–¥—Ä—É–≥—É—é,
    # –∞ –∫ —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –±—É–¥—É—Ç –¥—Ä—É–≥–∏–º–∏.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–æ–≤–µ—Ç –±–æ—Ç–∞, –∏ chat_id –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è,
    # –∞ —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ —Ç–æ–≥–æ —é–∑–µ—Ä–∞.
    thread = threading.Thread(
        target=tracking_loop,
        args=(chat_id, train_tracking, train_id, route_id, url),
        name=f"tracking_{train_tracking}_{chat_id}",
    )

    thread.start()
    bot.send_message(
        chat_id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_tracking} –∑–∞–ø—É—â–µ–Ω–æ."
    )


# =============================================================================


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–µ–∑–¥–æ–≤
@bot.message_handler(commands=["show_track_list"])
@ensure_start
def show_track_list(message):

    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bot.send_chat_action(message.chat.id, 'typing')  # Show typing indicator
    time.sleep(1)  # Optional delay

    reply = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    track_list = async_db_call(get_track_list, message)
    # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    # 0-tracking_id -> int(),
    # 1-t.train_number -> str(),
    # 2-r.city_from,
    # 3-r.city_to,
    # 4-r.date -> str(),
    # 5-t.time_depart -> str()
    if track_list:

        reply_edit = []
        for x in track_list:
            date_obj = datetime.strptime(x[4], "%Y-%m-%d")
            f_date = date_obj.strftime("%d.%m.%y")
            reply_edit.append(
                f"üöÜ {x[1]} {x[2]}‚û°Ô∏è{x[3]}\nüïí {x[5]} {f_date} \n{'-'*5}"
            )
        reply = "\n".join(reply_edit)
    bot.reply_to(message, f"{reply}")


# –û—Å—Ç–∞–Ω–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–µ–∑–¥–∞
@bot.message_handler(commands=["stop_track_train"])
@ensure_start
def stop_track_train(message):
    track_list = async_db_call(get_track_list, message)
    # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    # 0-tracking_id -> int(),
    # 1-t.train_number -> str(),
    # 2-r.city_from,
    # 3-r.city_to,
    # 4-r.date -> str(),
    # 5-t.time_depart -> str()

    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bot.send_chat_action(message.chat.id, 'typing')  # Show typing indicator
    time.sleep(1)  # Optional delay

    if track_list:
        markup = types.InlineKeyboardMarkup()
        for x in track_list:
            date_obj = datetime.strptime(x[4], "%Y-%m-%d")
            f_date = date_obj.strftime("%d.%m.%y")
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            reply = f"üö´ {x[1]} {x[2]}‚û°Ô∏è{x[3]} üïí {x[5]} {f_date}"
            markup.row(
                types.InlineKeyboardButton(
                    f"{reply}",
                    callback_data=f"{x[0]}:{x[1]}:{x[4]}_stop_tracking",
                )
            )
        bot.reply_to(message, "–í—ã–±—Ä–∞—Ç—å —É–¥–∞–ª—è–µ–º—ã–π –ø–æ–µ–∑–¥: ", reply_markup=markup)
    else:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.callback_query_handler(
    func=lambda callback: callback.data.endswith("_stop_tracking")
)
@ensure_start
def stop_tracking_train_by_number(callback):
    bot.answer_callback_query(callback.id)
    # tracking_id, t.train_number, r.date
    train_stop_tracking = callback.data.split("_")[0].split(':')
    chat_id = callback.message.chat.id
    tracking_id = train_stop_tracking[0]
    train_number = train_stop_tracking[1]
    date = train_stop_tracking[2]

    try:
        async_db_call(
            _stop_tracking_logic,
            tracking_id,
        )
    except Exception:
        raise
    logging.info(
        f"Train_number: {train_number} date: {date}"
        f" stop tracking for chat_id: {chat_id},"
        f" tracking_id: {tracking_id}."
    )
    bot.send_message(
        chat_id, f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_number}/{date} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
    )


# –î–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
def _stop_tracking_logic(
    tracking_id,
):
    try:
        execute_db_query(
            """
            DELETE FROM tracking WHERE tracking_id = %s;
            """,
            (tracking_id,),
            commit=True,
        )

    except Exception as e:
        logging.error(
            f"Database error in stop_tracking_train_by_number: {str(e)}"
        )
        raise


# ============================================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def get_all_active_trackings():
    rows = execute_db_query(
        """
            SELECT
                t.chat_id,
                tr.train_number,
                t.train_id,
                tr.route_id,
                r.url
            FROM tracking t
            JOIN trains tr ON t.train_id = tr.train_id
            JOIN routes r ON tr.route_id = r.route_id

        """,
        fetchall=True,
        commit=True,
    )
    return rows


def restore_all_trackings():
    try:
        rows = async_db_call(get_all_active_trackings)
        if not rows:
            logging.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return
        for row in rows:
            chat_id = row[0]
            train_tracking = row[1]
            train_id = row[2]
            route_id = row[3]
            url = row[4]

            thread = threading.Thread(
                target=tracking_loop,
                args=(chat_id, train_tracking, train_id, route_id, url),
                name=f"tracking_{train_tracking}_{chat_id}",
                daemon=True,
            )
            thread.start()
            logging.info(
                f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {train_tracking} –¥–ª—è {chat_id}"
            )

    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {str(e)}", exc_info=True
        )


# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
def normalize_city_name(name):
    name = name.strip().lower()
    try:
        index = all_station_list_lower.index(name)
        name = all_station_list[index]
    except Exception:
        name = name.capitalize()
    return name


# -------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def is_date_active(year, month, day):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –¥–∞—Ç–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 59 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π)"""
    today = datetime.now().date()
    selected_date = datetime(year, month, day).date()
    max_date = today + timedelta(days=59)
    return today <= selected_date <= max_date


def generate_calendar(year=None, month=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤"""
    now = datetime.now()
    today = now.date()
    max_date = today + timedelta(days=59)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü
    if year < now.year or (year == now.year and month < now.month):
        year, month = now.year, now.month

    markup = types.InlineKeyboardMarkup()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–º–µ—Å—è—Ü –∏ –≥–æ–¥)
    month_name = calendar.month_name[month]
    markup.row(
        types.InlineKeyboardButton(
            f"{month_name} {year}", callback_data="ignore"
        )
    )

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    markup.row(
        *[
            types.InlineKeyboardButton(day, callback_data="ignore")
            for day in week_days
        ]
    )

    # –Ø—á–µ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    month_cal = calendar.monthcalendar(year, month)
    for week in month_cal:
        row = []
        for day in week:
            if day == 0:
                row.append(
                    types.InlineKeyboardButton(" ", callback_data="ignore")
                )
            else:
                date_str = f"{year}-{month:02d}-{day:02d}"
                date_obj = datetime(year, month, day).date()
                if is_date_active(year, month, day):
                    # –ê–∫—Ç–∏–≤–Ω–∞—è –¥–∞—Ç–∞
                    emoji = "üîπ" if date_obj == today else ""
                    row.append(
                        types.InlineKeyboardButton(
                            f"{emoji}{day}", callback_data=f"select_{date_str}"
                        )
                    )
                else:
                    # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∞—Ç–∞
                    row.append(
                        types.InlineKeyboardButton(
                            f"*{day}*", callback_data="ignore"
                        )
                    )
        markup.row(*row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞)
    if not (year == now.year and month == now.month):
        nav_buttons.append(
            types.InlineKeyboardButton(
                "‚óÄÔ∏è", callback_data=f"change_{prev_year}_{prev_month}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
    today_str = f"{now.year}-{now.month:02d}-{now.day:02d}"
    nav_buttons.append(
        types.InlineKeyboardButton(
            "–°–µ–≥–æ–¥–Ω—è", callback_data=f"select_{today_str}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –±—É–¥—É—â–∏–µ –º–µ—Å—è—Ü—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 59 –¥–Ω–µ–π
    if (next_year < max_date.year) or (
        next_year == max_date.year and next_month <= max_date.month
    ):
        nav_buttons.append(
            types.InlineKeyboardButton(
                "‚ñ∂Ô∏è", callback_data=f"change_{next_year}_{next_month}"
            )
        )

    if nav_buttons:
        markup.row(*nav_buttons)

    return markup


@bot.callback_query_handler(
    func=lambda call: call.data.startswith(('select_', 'change_'))
)
def handle_calendar_callback(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    if call.data.startswith('select_'):
        # –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞
        selected_date = call.data[7:]
        bot.delete_message(chat_id, message_id)
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        bot.clear_step_handler_by_chat_id(chat_id)
        process_selected_date(chat_id, selected_date)

    elif call.data.startswith('change_'):
        # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        bot.send_chat_action(chat_id, 'typing')  # Show typing indicator
        # –°–º–µ–Ω–∞ –º–µ—Å—è—Ü–∞
        _, year, month = call.data.split('_')
        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=generate_calendar(int(year), int(month)),
        )

    bot.answer_callback_query(call.id)


def process_selected_date(chat_id, date_str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π get_date
        class Message:
            def __init__(self, chat_id, text):
                self.chat = type('Chat', (), {'id': chat_id})
                self.text = text
                self.message_id = None

        message = Message(chat_id, date_str)
        get_date(message)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {str(e)}")


# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º "—Å–µ–≥–æ–¥–Ω—è –∏ –¥–∞–ª–µ–µ"
def normalize_date(date_str):

    formats = [
        "%d.%m.%Y",
        "%d/%m/%Y",
        "%d-%m-%Y",
        "%Y-%m-%d",
        "%d %m %Y",
        "%Y %m %d",
    ]
    today = datetime.today().date()
    if date_str == "–°–µ–≥–æ–¥–Ω—è":
        return datetime.today().date()
    elif date_str == "–ó–∞–≤—Ç—Ä–∞":
        return datetime.today().date() + timedelta(days=1)
    if not date_str or not isinstance(date_str, str):
        raise ValueError(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\
–ü—Ä–∏–º–µ—Ä—ã: {today.strftime('%Y-%m-%d')}, \
{today.strftime('%d %m %Y')}, \
{today.strftime('%Y %m %d')}"
        )

    for fmt in formats:
        try:
            dt = datetime.strptime(date_str.strip(), fmt)
            # –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
            if dt.date() < today:
                raise PastDateError("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º")
            # –î–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–ª–µ–µ 59 —Å—É—Ç–æ–∫
            if (dt.date() - today).days > 59:
                raise FutureDateError("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞ 60 —Å—É—Ç–æ–∫")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return dt.strftime("%Y-%m-%d")
        # –î–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º"
        except PastDateError as e:
            # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            raise e

        except FutureDateError as e:
            # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            raise e

        except ValueError:
            continue

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª:
    raise ValueError(
        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\
–ü—Ä–∏–º–µ—Ä—ã: {today.strftime('%Y-%m-%d')}, \
{today.strftime('%d %m %Y')}, \
{today.strftime('%Y %m %d')}"
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç–∞
def check_tickets_by_class(train_number, soup, chat_id):
    train_info = soup.select(
        f'div.sch-table__row[data-train-number^="{train_number}"]'
    )
    try:
        selling_allowed = train_info[0]["data-ticket_selling_allowed"]
    except IndexError:
        selling_allowed = "none"

    if selling_allowed == "true":
        return get_tickets_by_class(train_number, soup)
    elif selling_allowed == "false":
        return "–ú–µ—Å—Ç –Ω–µ—Ç –ª–∏–±–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø—Ä–æ–¥–∞–∂–∞"
    else:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–µ"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
def get_tickets_by_class(train_number, soup):
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –º–µ—Å—Ç –∏ –∫–ª–∞—Å—Å–æ–≤ –≤–∞–≥–æ–Ω–æ–≤
    train_info = soup.select(
        f'div.sch-table__row[data-train-number^="{train_number}"]'
    )
    # –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤–∞–≥–æ–Ω–æ–≤ –∏ –º–µ—Å—Ç–∞
    class_names = train_info[0].find_all(
        class_="sch-table__t-quant js-train-modal dash"
    )
    # –≤—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è —Å –∑–∞–º–µ–Ω–æ–π –Ω–æ–º–µ—Ä–∞ –Ω–∞ –∏–º—è –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    # –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    tickets_by_class = {}
    for class_n in class_names:
        name = seats_type_dict[class_n["data-car-type"]]  # type: ignore
        try:
            seats_num = int(class_n.select_one("span").text)  # type: ignore
        except ValueError:
            seats_num = "–ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—Ç"
            tickets_by_class[name] = "\u221e"
            continue
        if name in tickets_by_class:
            tickets_by_class[name] += seats_num
        else:
            tickets_by_class[name] = seats_num
    return tickets_by_class


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
def check_depart_time(train_number, soup, train_id):
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –º–µ—Å—Ç –∏ –∫–ª–∞—Å—Å–æ–≤ –≤–∞–≥–æ–Ω–æ–≤
    train_info = soup.select(
        f'div.sch-table__row[data-train-number^="{train_number}"] \
            div.sch-table__time.train-from-time'
    )
    logging.info(
        f"FG check_depart_time (train_number, train_id, train_info) \n"
        f"{train_number, ' ',  train_id, '\n', train_info}"
    )
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã —Å –¥–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    # –ï—Å–ª–∏ –¥–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∞ train_info –ø—É—Å—Ç–æ–π == –æ—à–∏–±–∫–∞ —Å–∞–π—Ç–∞
    # –¢–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: –µ—Å–ª–∏ –ø–æ–µ–∑–¥ —Å–µ–≥–æ–¥–Ω—è
    # –Ω–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, —Ç–æ –±—É–¥–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –º–∏–Ω—É—Å–æ–º.
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, —Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—É–¥–µ—Ç –≤–æ–≤—Å–µ
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ –≤ —Ü–∏–∫–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    # –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ - train_id=None):
    resp_db = execute_db_query(
        """
            SELECT r.date FROM trains t
            JOIN routes r ON t.route_id = r.route_id
            WHERE train_id = %s
            """,
        (train_id,),
        fetchone=True,
    )
    if resp_db:
        depart_time = datetime.strptime(resp_db[0], "%Y-%m-%d").date()
    else:
        depart_time = datetime(2000, 1, 1).date()
    today = datetime.today().date()

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤—ã–∑–≤–∞—Ç—å 0. –ï—Å–ª–∏ —Å–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç.

    if not train_info and (depart_time >= today):
        raise SiteResponseError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–∞ —Å —Å–∞–π—Ç–∞')
    elif not train_info and depart_time < today:
        # –£—Å–ª–æ–≤–∏–µ –≤–∞–∂–Ω–æ –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ —Å—Ç—ã–∫–µ —Å—É—Ç–æ–∫
        result = 0
    else:
        # –≤—Ä–µ–º—è –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        result = int(train_info[0]["data-value"])
    return result


# ============================================================================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã routes
def cleanup_expired_routes():
    while True:
        try:
            async_db_call(_cleanup_logic)
        except Exception:
            raise
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        time.sleep(2 * 60 * 60)


def _cleanup_logic():
    try:
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π
        expired_routes = execute_db_query(
            """
            SELECT route_id FROM routes
            WHERE date < %s
            """,
            (yesterday,),
            fetchall=True,
        )
        if expired_routes:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ tracking
            execute_db_query(
                """
                DELETE FROM tracking
                WHERE train_id IN (
                    SELECT train_id FROM trains
                    WHERE route_id IN (
                        SELECT route_id FROM routes
                        WHERE date < %s
                    )
                )
                """,
                (yesterday,),
                commit=True,
            )

            # –£–¥–∞–ª—è–µ–º –ø–æ–µ–∑–¥–∞
            execute_db_query(
                """
                DELETE FROM trains
                WHERE route_id IN (
                    SELECT route_id FROM routes
                    WHERE date < %s
                )
                """,
                (yesterday,),
                commit=True,
            )

            # –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç—ã
            execute_db_query(
                """
                DELETE FROM routes
                WHERE date < %s
                """,
                (yesterday,),
                commit=True,
            )

            logging.info(f"–£–¥–∞–ª–µ–Ω–æ {len(expired_routes)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    except Exception as e:
        logging.error(f"Database error in cleanup_expired_routes: {str(e)}")
        raise


# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω
def monitor_threads_track():
    while True:
        active_threads = [
            f"Thread: {t.name}, ID: {t.ident}" for t in threading.enumerate()
        ]

        logging.info(f"Active threads: {len(active_threads)}")
        for t in active_threads:
            logging.info(f"Thread {t} is alive")
        time.sleep(1800)


def start_background_tasks():
    # –ü–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    cleanup_thread = threading.Thread(
        target=cleanup_expired_routes,
        name="route_cleanup",
        daemon=True,  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ main-–ø–æ—Ç–æ–∫–∞
    )
    cleanup_thread.start()

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    monitor_threads = threading.Thread(
        target=monitor_threads_track,
        name="monitor_threads",
        daemon=True,  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ main-–ø–æ—Ç–æ–∫–∞
    )
    monitor_threads.start()


# =============================================================================
# –û—Å—Ç–∞–Ω–æ–≤ –±–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã


# –û—Å—Ç–∞–Ω–æ–≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text.startswith('/stop'))
def universal_stop_handler(message):
    stop(message)


@ensure_start
def stop(message):
    chat_id = message.chat.id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    markup = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton("–î–∞", callback_data="confirm_stop")
    btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_stop")
    markup.add(btn_yes, btn_no)

    bot.send_message(
        chat_id,
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "cancel_stop")
def cancel_stop(call):
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(chat_id, call.message.message_id)
    bot.send_message(chat_id, "üü¢ –ë–æ—Ç –≤ —Ä–∞–±–æ—Ç–µ")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_stop")
def confirm_stop(call):
    chat_id = call.message.chat.id

    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bot.send_chat_action(chat_id, 'typing')  # Show typing indicator
    time.sleep(1)  # Optional delay

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(chat_id, call.message.message_id)

    # #!!!–î–û–ë–ê–í–ò–¢–¨
    # # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
    # clear_chat_history(chat_id)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞

    # –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è
    # –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ False
    # –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–µ–∑–¥–æ–≤, —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Å–µ—Å—Å–∏—é

    async_db_call(_confirm_stop_logic, chat_id)
    del_user_data(chat_id)
    bot.send_message(chat_id, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def _confirm_stop_logic(chat_id):
    try:
        # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        execute_db_query(
            """
            DELETE FROM tracking
            WHERE chat_id = %s
            """,
            (chat_id,),
            commit=True,
        )

        # –£–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        execute_db_query(
            """
            DELETE FROM users
            WHERE chat_id = %s
            """,
            (chat_id,),
            commit=True,
        )
        logging.info(
            f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω chat_id: {chat_id}." f"–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω"
        )
    except Exception as e:
        logging.error(f"Database error in cleanup_expired_routes: {str(e)}")
        raise


# –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@bot.message_handler(commands=[stop_code])  # type: ignore
def exit_admin(message):
    chat_id = message.chat.id

    with db_lock:
        try:
            conn = db_pool.getconn()
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM tracking WHERE chat_id = %s", (chat_id,)
            )
            cursor.execute("DELETE FROM users WHERE chat_id = %s", (chat_id,))
            conn.commit()
        finally:
            cursor.close()
            conn.close()

    bot.send_message(chat_id, "–í—ã—Ö–æ–¥ –∏–∑ –ü–û")

    def stop_bot():
        bot.stop_polling()
        os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥

    threading.Thread(target=stop_bot).start()


# =============================================================================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
    restore_all_trackings()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
    start_background_tasks()

    try:
        try:
            bot.remove_webhook()  # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
            time.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–º Telegram
            success = bot.set_webhook(url=f"{webhook_url}/{token}")
            if success:
                logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                logging.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
            app.run(host=db_host, port=web_port)

        except apihelper.ApiTelegramException as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ "webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            if "webhook is not set" not in str(e):
                logging.error(f"Webhook deletion failed: {e}")
            else:
                raise  # –ü—Ä–æ–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ API

        # –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    except requests.exceptions.ReadTimeout as e:
        logging.error(f"Timeout error: {e}.")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    except Exception as e:
        logging.error(f"Attempt failed: {str(e)}")
