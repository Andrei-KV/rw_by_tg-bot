import requests
from bs4.filter import SoupStrainer
from bs4 import BeautifulSoup, StopParsing
import lxml
from urllib.parse import quote
import time
import json
import sys
# –∏–º–ø–æ—Ä—Ç –¥–ª—è –±–æ—Ç–∞
from token_info import token, bot_name
import telebot
import webbrowser
from telebot import types
#–±–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
import threading

# —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä-–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
seats_type_dict = {
    '1': '–û–±—â–∏–π',
    '2': '–°–∏–¥—è—á–∏–π',
    '3': '–ü–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã–π',
    '4': '–ö—É–ø–µ–π–Ω—ã–π',
    '5': '–ú—è–≥–∫–∏–π',
    '6': '–°–í',
}


#-------------------------------
# –í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}  # –ö–ª—é—á - chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏

# ========================
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
# ========================
def ensure_start(func):
    def wrapper(message):
        if message.chat.id not in user_data:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
            return
        return func(message)
    return wrapper

#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö


#–°–æ–∑–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram.
bot = telebot.TeleBot(token)
@bot.message_handler(commands=['start'])
def start(message):
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ')
    #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    bot.register_next_step_handler(message, get_city_from)
    user_data[message.chat.id] = {'step': 'start'}
    
def get_city_from(message):
    
    city_from = message.text.strip().lower().capitalize()
    user_data[message.chat.id].update({'city_from': city_from})
    bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ')
    #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è
    bot.register_next_step_handler(message, get_city_to)

def get_city_to(message):
    
    city_to = message.text.strip().lower().capitalize()
    user_data[message.chat.id].update({'city_to': city_to})
    bot.send_message(message.chat.id, '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥: ')
    #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –¥–∞—Ç—ã
    bot.register_next_step_handler(message, get_date)

def get_date(message):
    
    date = message.text.strip()
    user_data[message.chat.id].update({'date': date})
    # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤
    try:
        get_trains_list(message)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ."
        bot.send_message(message.chat.id, error_msg)
        start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É

#—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
def get_trains_list(message):

    encoded_from = quote(user_data[message.chat.id]['city_from'])
    encoded_to = quote(user_data[message.chat.id]['city_to'])

    #–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã soup

    # url = f'https://pass.rw.by/ru/route/?from={encoded_from}&to={encoded_to}&date={date}'
    # user_data[message.chat.id]['url'] = url
    # r = requests.get(url)

    #–Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É –ú–∏–Ω—Å–∫-–ë—Ä–µ—Å—Ç 2025-04-25
    with open('test_rw_by.html', 'r+') as f:
        r = f.read()

    only_span_div_tag = SoupStrainer(['span', 'div'])
    soup = BeautifulSoup(r, 'lxml', parse_only=only_span_div_tag) #–≤–µ—Ä–Ω—É—Ç—å r.text

    #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é
    user_data[message.chat.id]['soup'] = soup

    train_id_list = [i.text for i in soup.find_all('span', class_="train-number")] 
    trains_list = []
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è
    for train in train_id_list:
        time_depart = soup.select(f'[data-train-number="{train}"] [data-sort="departure"]')[0].text.strip()
        time_arriv = soup.select(f'[data-train-number="{train}"] [data-sort="arrival"]')[0].text.strip()
        trains_list.append([train, time_depart, time_arriv])
    
    #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤
    markup = types.InlineKeyboardMarkup()
    #–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞
    marker = 'selected_train'
    for train in trains_list:
        markup.row(types.InlineKeyboardButton(
            f'–ü–æ–µ–∑–¥: {train[0]} –û—Ç–ø—Ä: {train[1]} –ü—Ä–∏–±: {train[2]}', 
            callback_data= f'{train[0]}_selected')
            )
    #–≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π soup –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–≤: ", reply_markup=markup)

#–≤—ã–±–æ—Ä –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–æ–±–∞–≤–∫–∞ —á–µ—Ä–µ–∑ _, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –æ—Ç–≤–µ—Ç—ã)
@bot.callback_query_handler(func=lambda callback: callback.data.endswith('_selected')) 
def select_train(callback): # callback == –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
    train_selected = callback.data.split('_')[0]

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏ –∑–¥–µ—Å—å, —Ç.–∫. –¥–∞–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç message
    soup = user_data[callback.message.chat.id]['soup']

    #–≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º –∏–ª–∏ "–ú–µ—Å—Ç –Ω–µ—Ç"
    ticket_dict = check_tickets_by_class(train_selected, soup)
    
    #–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤, –Ω–æ –∑–¥–µ—Å—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞ —á—Ç–æ False
    #–∑–¥–µ—Å—å, —Ç.–∫. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if 'tracking_active' not in user_data[callback.message.chat.id]:
        user_data[callback.message.chat.id]['tracking_active'] = {}

    user_data[callback.message.chat.id]['tracking_active'][train_selected] = {
                'status': False,
                'ticket_dict': ticket_dict,
        }


    #–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –æ–∂–∏–¥–∞–Ω–∏—è
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.answer_callback_query(callback.id)
   
    #–∫–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –ø–æ–µ–∑–¥–æ–º
    markup = types.InlineKeyboardMarkup()
    btn_track = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', callback_data=f'{train_selected}_start_tracking')
    markup.add(btn_track)
    
    bot.send_message(
        chat_id=callback.message.chat.id,
        text=f'–ü–æ–µ–∑–¥ ‚Ññ{train_selected}\n{ticket_dict}',
        reply_markup=markup
    )

#–≤–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∞ –≤ –ª–∏—Å—Ç —Å–ª–µ–∂–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda callback: callback.data.endswith('_start_tracking')) 
def start_tracking_train(callback): 

    train_tracking = callback.data.split('_')[0]
    chat_id = callback.message.chat.id
    
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–µ–∑–¥–∞ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    user_data[chat_id]['tracking_active'][train_tracking]['status'] = True

    #–∑–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    #–ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ
    def tracking_loop(chat_id, train_tracking):
        #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ
        try:
            if chat_id not in user_data or \
            'tracking_active' not in user_data[chat_id] or \
            train_tracking not in user_data[chat_id]['tracking_active']:
                print(f"[thread skip] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {chat_id}, {train_tracking}")
                return
            while user_data[chat_id].get('tracking_active', {}).get(train_tracking, False):

                #–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã soup
                # user_data[chat_id ]['url']
                # r = requests.get(user_data[chat_id ]['url'])

                #–Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É –ú–∏–Ω—Å–∫-–ë—Ä–µ—Å—Ç 2025-04-25
                with open('test_rw_by.html', 'r+') as f:
                    r = f.read()

                only_span_div_tag = SoupStrainer(['span', 'div'])
                soup = BeautifulSoup(r, 'lxml', parse_only=only_span_div_tag) #–≤–µ—Ä–Ω—É—Ç—å r.text

                #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é
                user_data[chat_id]['soup'] = soup

                #–ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª–µ–µ —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∏–ª–µ—Ç–∞–º
                ticket_dict = check_tickets_by_class(train_tracking, soup)
                
                #–≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∏–ª–µ—Ç–∞—Ö
                if ticket_dict != user_data[chat_id]['tracking_active'][train_tracking]['ticket_dict']:
                    bot.send_message(chat_id, f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ {train_tracking}: {ticket_dict}')
                    user_data[chat_id]['tracking_active'][train_tracking]['ticket_dict'] = ticket_dict
                
                #–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print("‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏:")
                for thread in threading.enumerate():
                    print(f"  üî∏ {thread.name} (ID: {thread.ident})")

                time.sleep(10)
        except KeyError:
            print(f"[thread error] KeyError ‚Äî {chat_id}, –ø–æ–µ–∑–¥ {train_tracking}")
    
    #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, 
    #—á—Ç–æ–±—ã –Ω–µ –±—ã—Ç—å –≤ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É-–¥—Ä—É–≥—É—é, 
    # –∞ –∫ —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –±—É–¥—É—Ç –¥—Ä—É–≥–∏–º–∏. 
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–æ–≤–µ—Ç –±–æ—Ç–∞, –∏ chat_id –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è, 
    # –∞ —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ —Ç–æ–≥–æ —é–∑–µ—Ä–∞.
    thread = threading.Thread(
        target=tracking_loop, 
        args=(chat_id, train_tracking), 
        name=f"tracking_{train_tracking}_{chat_id}"
        )
    
    thread.start()
    bot.send_message(chat_id, f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_tracking} –∑–∞–ø—É—â–µ–Ω–æ.')

#–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–µ–∑–¥–æ–≤, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
#–¥–ª—è –∫–æ–º–∞–Ω–¥ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –û—Å—Ç–∞–Ω–æ–≤–∞
def get_track_list(message):
    track_list = []
    if user_data[message.chat.id].get('tracking_active', False): 
        for train, info in user_data[message.chat.id]['tracking_active'].items():
            if info['status']:
                track_list.append(train)
        if track_list:
            reply = '\n'.join(track_list) 
    return track_list #–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

#–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–µ–∑–¥–æ–≤
@bot.message_handler(commands=['show_track_list'])
@ensure_start
def show_track_list(message):

    reply = '–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç' #–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    track_list = get_track_list(message)
    if track_list:
        reply = '\n'.join(track_list) 
    bot.reply_to(message, f'{reply}')

#–æ—Å—Ç–∞–Ω–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–µ–∑–¥–∞

@bot.message_handler(commands=['stop_track_train'])
@ensure_start
def stop_track_train(message):
    track_list =  get_track_list(message)
    if track_list:
        markup = types.InlineKeyboardMarkup()
        for train in track_list:
            markup.row(types.InlineKeyboardButton(
                f'–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞: {train}', 
                callback_data= f'{train}_stop_tracking')
                )
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ", reply_markup=markup)
    else:
        bot.reply_to(message, '–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç')

#—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda callback: callback.data.endswith('_stop_tracking')) 
def stop_tracking_train_by_number(callback):
    train_stop_tracking = callback.data.split('_')[0]
    chat_id = callback.message.chat.id

    user_data[chat_id]['tracking_active'][train_stop_tracking]['status'] = False

    bot.send_message(chat_id, f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∞ {train_stop_tracking} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')

#-------------------------------------



#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç–∞
def check_tickets_by_class(train_number, soup):
    train_info = soup.select(f'div.sch-table__row[data-train-number="{train_number}"]') # type: ignore
    selling_allowed = train_info[0]['data-ticket_selling_allowed']
    if selling_allowed == 'true':
        return get_tickets_by_class(train_number, soup)
    return '–ú–µ—Å—Ç –Ω–µ—Ç'

#–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
def get_tickets_by_class(train_number, soup):

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –º–µ—Å—Ç –∏ –∫–ª–∞—Å—Å–æ–≤ –≤–∞–≥–æ–Ω–æ–≤
    train_info = soup.select(f'div.sch-table__row[data-train-number="{train_number}"]') # type: ignore
    # –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤–∞–≥–æ–Ω–æ–≤ –∏ –º–µ—Å—Ç–∞
    class_names = train_info[0].find_all(class_="sch-table__t-quant js-train-modal dash")
    # –≤—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è —Å –∑–∞–º–µ–Ω–æ–π –Ω–æ–º–µ—Ä–∞ –Ω–∞ –∏–º—è –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    # –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    tickets_by_class = {}
    for class_n in class_names:
        name = seats_type_dict[class_n['data-car-type']] # type: ignore
        seats_num = int(class_n.select_one('span').text) # type: ignore
        if name in tickets_by_class:
            tickets_by_class[name] += seats_num
        else:
            tickets_by_class[name] = seats_num
    return tickets_by_class


#–æ—Å—Ç–∞–Ω–æ–≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —é–∑–µ—Ä–∞
@bot.message_handler(commands=['stop'])
@ensure_start
def stop(message):
    chat_id = message.chat.id
    #–¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è 
    #–≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ False
    if chat_id in user_data and 'tracking_active' in user_data[chat_id]:
        for train in user_data[chat_id]['tracking_active']:
            user_data[chat_id]['tracking_active'][train]['status'] = False
    #–ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–µ–∑–¥–æ–≤, —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Å–µ—Å—Å–∏—é
    user_data.pop(chat_id, None)
    bot.send_message(chat_id, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω ')


#–≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@bot.message_handler(commands=['1765362'])
def exit_admin(message):
    del user_data[message.chat.id] 
    bot.send_message(message.chat.id, '–í—ã—Ö–æ–¥ –∏–∑ –ü–û')
    bot.stop_polling()
    sys.exit()

#–¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:
bot.polling(non_stop=True)
'''
# —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
with open('all_stations_dict.py') as py_file:
    stantions = py_file.read()



        '''